name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '10'

jobs:
  # ===========================
  # Тестирование и качество кода
  # ===========================
  test-and-lint:
    name: 🧪 Tests & Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 📂 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 🗄️ Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 ESLint check
        run: pnpm lint

      - name: 🎨 Prettier check
        run: pnpm format --check || (echo "❌ Code formatting issues found. Run 'pnpm format' to fix." && exit 1)

      - name: 🔨 Build packages
        run: pnpm build

      - name: 🧪 Run tests
        run: pnpm test

      - name: 📊 Coverage report
        run: pnpm coverage
        continue-on-error: true

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  # ===========================
  # Проверка примеров
  # ===========================
  test-examples:
    name: 🎯 Test Examples
    runs-on: ubuntu-latest
    needs: test-and-lint
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔨 Build packages
        run: pnpm build

      - name: 🎯 Test demo script
        run: |
          chmod +x ./start-demo.sh
          timeout 30s ./start-demo.sh --static --no-browser || [ $? -eq 124 ]

      - name: 🎯 Test examples server
        run: |
          cd examples/server
          pnpm install --frozen-lockfile
          pnpm typecheck || echo "⚠️ Typecheck failed, but continuing..."
          pnpm build || echo "⚠️ Build failed, but continuing..."

  # ===========================
  # Проверка совместимости
  # ===========================
  compatibility-matrix:
    name: 🔧 Node.js ${{ matrix.node }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: test-and-lint
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node: ['18', '20', '22']
        
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔨 Build packages
        run: pnpm build

      - name: 🧪 Run tests
        run: pnpm test

  # ===========================
  # Semantic Release
  # ===========================
  semantic-release:
    name: 📦 Semantic Release
    runs-on: ubuntu-latest
    needs: [test-and-lint, test-examples]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !startsWith(github.event.head_commit.message, 'chore(release):')
    
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔨 Build packages
        run: pnpm --filter="./packages/*" build

      - name: 🔍 List build artifacts
        run: |
          echo "🔍 Checking build artifacts..."
          find packages -name "dist" -type d -exec echo "📁 {}" \; -exec ls -la {} \;

      - name: 🚀 Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release

  # ===========================
  # Деплой документации
  # ===========================
  deploy-docs:
    name: 📚 Deploy Documentation
    runs-on: ubuntu-latest
    needs: test-and-lint
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔨 Build packages
        run: pnpm build

      - name: 📚 Build documentation
        run: pnpm docs:build

      - name: 📤 Upload docs artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: docs/src/.vitepress/dist

      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  # ===========================
  # Уведомления о результатах
  # ===========================
  notify-results:
    name: 📣 Notify Results
    runs-on: ubuntu-latest
    needs: [test-and-lint, test-examples, compatibility-matrix]
    if: always()
    
    steps:
      - name: 📊 Check job results
        run: |
          echo "🔍 Test & Lint: ${{ needs.test-and-lint.result }}"
          echo "🎯 Examples: ${{ needs.test-examples.result }}"
          echo "🔧 Compatibility: ${{ needs.compatibility-matrix.result }}"
          
          if [ "${{ needs.test-and-lint.result }}" != "success" ] || \
             [ "${{ needs.test-examples.result }}" != "success" ] || \
             [ "${{ needs.compatibility-matrix.result }}" != "success" ]; then
            echo "❌ One or more jobs failed"
            exit 1
          else
            echo "✅ All jobs passed successfully!"
          fi