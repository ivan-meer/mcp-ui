name: 🏷️ Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      prerelease_id:
        description: 'Prerelease identifier (alpha, beta, rc)'
        required: false
        default: 'alpha'
        type: string
      skip_tests:
        description: 'Skip tests (only for emergency releases)'
        required: false
        default: false
        type: boolean

concurrency:
  group: release
  cancel-in-progress: false

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '10'

jobs:
  # ===========================
  # Pre-release проверки
  # ===========================
  pre-release-checks:
    name: 🔍 Pre-Release Checks
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    
    outputs:
      can-release: ${{ steps.check.outputs.can-release }}
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Lint check
        run: pnpm lint

      - name: 🔨 Build check
        run: pnpm build

      - name: 🧪 Test check
        run: pnpm test

      - name: ✅ Mark as ready for release
        id: check
        run: echo "can-release=true" >> $GITHUB_OUTPUT

  # ===========================
  # Создание релиза
  # ===========================
  create-release:
    name: 🚀 Create Release
    runs-on: ubuntu-latest
    needs: [pre-release-checks]
    if: always() && (needs.pre-release-checks.outputs.can-release == 'true' || inputs.skip_tests)
    
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔨 Build packages
        run: pnpm build

      - name: 🏷️ Determine version bump
        id: version
        run: |
          RELEASE_TYPE="${{ inputs.release_type }}"
          PRERELEASE_ID="${{ inputs.prerelease_id }}"
          
          if [ "$RELEASE_TYPE" = "prerelease" ]; then
            NEW_VERSION=$(npm version prerelease --preid="$PRERELEASE_ID" --no-git-tag-version)
          else
            NEW_VERSION=$(npm version "$RELEASE_TYPE" --no-git-tag-version)
          fi
          
          # Удаляем префикс 'v' если есть
          NEW_VERSION=${NEW_VERSION#v}
          
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "📦 New version will be: $NEW_VERSION"

      - name: 📝 Update package versions
        env:
          NEW_VERSION: ${{ steps.version.outputs.new-version }}
        run: |
          echo "🔄 Updating all package versions to $NEW_VERSION"
          
          # Обновляем корневой package.json
          pnpm version "$NEW_VERSION" --git-tag-version=false
          
          # Обновляем packages
          cd packages/client && pnpm version "$NEW_VERSION" --git-tag-version=false
          cd ../server && pnpm version "$NEW_VERSION" --git-tag-version=false
          cd ../shared && pnpm version "$NEW_VERSION" --git-tag-version=false

      - name: 📝 Generate changelog
        id: changelog
        run: |
          # Простой changelog генератор
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -n "$LAST_TAG" ]; then
            echo "📝 Generating changelog since $LAST_TAG"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" "$LAST_TAG"..HEAD)
          else
            echo "📝 Generating changelog for first release"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)")
          fi
          
          # Сохраняем changelog в файл
          cat > RELEASE_CHANGELOG.md << EOF
          ## What's Changed
          
          $CHANGELOG
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/$LAST_TAG...v${{ steps.version.outputs.new-version }}
          EOF
          
          echo "changelog-file=RELEASE_CHANGELOG.md" >> $GITHUB_OUTPUT

      - name: 🏷️ Create Git tag
        env:
          NEW_VERSION: ${{ steps.version.outputs.new-version }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add .
          git commit -m "chore(release): v$NEW_VERSION
          
          🤖 Automated release by GitHub Actions
          Release type: ${{ inputs.release_type }}
          " || echo "No changes to commit"
          
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
          git push origin main
          git push origin "v$NEW_VERSION"

      - name: 📦 Publish to NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NEW_VERSION: ${{ steps.version.outputs.new-version }}
        run: |
          echo "🚀 Publishing packages to NPM..."
          
          if [[ "${{ inputs.release_type }}" == "prerelease" ]]; then
            echo "📦 Publishing as prerelease with tag '${{ inputs.prerelease_id }}'"
            pnpm publish-packages --tag "${{ inputs.prerelease_id }}"
          else
            echo "📦 Publishing as stable release"
            pnpm publish-packages
          fi

      - name: 📢 Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.new-version }}
          release_name: 🎉 Release v${{ steps.version.outputs.new-version }}
          body_path: ${{ steps.changelog.outputs.changelog-file }}
          draft: false
          prerelease: ${{ inputs.release_type == 'prerelease' }}

      - name: 📊 Release Summary
        run: |
          echo "## 🎉 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Version**: v${{ steps.version.outputs.new-version }}" >> $GITHUB_STEP_SUMMARY
          echo "🏷️ **Type**: ${{ inputs.release_type }}" >> $GITHUB_STEP_SUMMARY
          echo "📦 **NPM Packages Published**:" >> $GITHUB_STEP_SUMMARY
          echo "- [@mcp-ui/client](https://www.npmjs.com/package/@mcp-ui/client)" >> $GITHUB_STEP_SUMMARY
          echo "- [@mcp-ui/server](https://www.npmjs.com/package/@mcp-ui/server)" >> $GITHUB_STEP_SUMMARY
          echo "- [@mcp-ui/shared](https://www.npmjs.com/package/@mcp-ui/shared)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Links**:" >> $GITHUB_STEP_SUMMARY
          echo "- [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.new-version }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Repository](https://github.com/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY

  # ===========================
  # Post-release задачи
  # ===========================
  post-release:
    name: 📋 Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [create-release]
    if: success()
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔄 Trigger documentation update
        run: |
          echo "📚 Documentation will be updated automatically by the main CI workflow"

      - name: 🎯 Validate NPM packages
        run: |
          echo "🔍 Validating published packages..."
          
          packages=("@mcp-ui/client" "@mcp-ui/server" "@mcp-ui/shared")
          
          for package in "${packages[@]}"; do
            echo "Checking $package..."
            npm info "$package" --json > package_info.json
            
            if jq -e '.versions[-1]' package_info.json > /dev/null; then
              latest_version=$(jq -r '.versions[-1]' package_info.json)
              echo "✅ $package@$latest_version is available on NPM"
            else
              echo "❌ $package not found on NPM"
              exit 1
            fi
          done

      - name: 📢 Notify success
        run: |
          echo "🎉 Release completed successfully!"
          echo "📦 All packages are now available on NPM"
          echo "📚 Documentation will be updated shortly"