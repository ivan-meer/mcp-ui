name: ü§ñ Auto Merge

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_review:
    types: [submitted]
  check_suite:
    types: [completed]
  status: {}

permissions:
  contents: write
  pull-requests: write
  checks: read

jobs:
  # ===========================
  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ª–∏—è–Ω–∏–µ
  # ===========================
  auto-merge:
    name: ü§ñ Auto Merge PR
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' ||
      github.event_name == 'pull_request_review' ||
      github.event_name == 'check_suite' ||
      github.event_name == 'status'
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üîç Check PR eligibility
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ PR
            let prNumber;
            if (context.eventName === 'pull_request') {
              prNumber = context.payload.pull_request.number;
            } else if (context.eventName === 'pull_request_review') {
              prNumber = context.payload.pull_request.number;
            } else if (context.eventName === 'check_suite') {
              const prs = context.payload.check_suite.pull_requests;
              if (prs.length === 0) return;
              prNumber = prs[0].number;
            } else {
              // –î–ª—è status events –∏—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ PR
              const commits = await github.rest.repos.listPullRequestsAssociatedWithCommit({
                owner,
                repo,
                commit_sha: context.payload.sha
              });
              if (commits.data.length === 0) return;
              prNumber = commits.data[0].number;
            }
            
            console.log(`Checking PR #${prNumber} for auto-merge eligibility`);
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ PR
            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: prNumber
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è
            const conditions = {
              notDraft: !pr.draft,
              notClosed: pr.state === 'open',
              targetMain: pr.base.ref === 'main',
              hasAutoMergeLabel: pr.labels.some(label => 
                ['auto-merge', 'dependencies', 'automated'].includes(label.name)
              ),
              authorIsDependabot: pr.user.login === 'dependabot[bot]',
              authorIsTrusted: ['ivan-meer', 'github-actions[bot]'].includes(pr.user.login)
            };
            
            console.log('PR conditions:', conditions);
            
            // PR –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è auto-merge –µ—Å–ª–∏:
            // 1. –≠—Ç–æ dependabot PR —Å –º–µ—Ç–∫–æ–π dependencies
            // 2. –≠—Ç–æ PR –æ—Ç –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞ —Å –º–µ—Ç–∫–æ–π auto-merge
            // 3. –≠—Ç–æ automated PR
            const eligible = conditions.notDraft && 
                           conditions.notClosed && 
                           conditions.targetMain && 
                           (
                             (conditions.authorIsDependabot && conditions.hasAutoMergeLabel) ||
                             (conditions.authorIsTrusted && conditions.hasAutoMergeLabel)
                           );
            
            core.setOutput('eligible', eligible);
            core.setOutput('pr_number', prNumber);
            core.setOutput('pr_title', pr.title);
            core.setOutput('pr_author', pr.user.login);
            
            if (eligible) {
              console.log('‚úÖ PR is eligible for auto-merge');
            } else {
              console.log('‚ùå PR is not eligible for auto-merge');
            }

      - name: üîç Check PR status
        id: status
        if: steps.check.outputs.eligible == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const prNumber = ${{ steps.check.outputs.pr_number }};
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–æ–∫
            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: prNumber
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–æ–∫
            const { data: checks } = await github.rest.checks.listForRef({
              owner,
              repo,
              ref: pr.head.sha,
              status: 'completed'
            });
            
            const { data: statuses } = await github.rest.repos.listCommitStatusesForRef({
              owner,
              repo,
              ref: pr.head.sha
            });
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–æ–∫
            const failedChecks = checks.check_runs.filter(check => 
              check.conclusion && check.conclusion !== 'success' && check.conclusion !== 'neutral'
            );
            
            const failedStatuses = statuses.filter(status => 
              status.state === 'failure' || status.state === 'error'
            );
            
            const allChecksPassed = failedChecks.length === 0 && failedStatuses.length === 0;
            const hasRequiredChecks = checks.check_runs.length > 0 || statuses.length > 0;
            
            console.log(`Checks status for PR #${prNumber}:`);
            console.log(`- Total checks: ${checks.check_runs.length}`);
            console.log(`- Failed checks: ${failedChecks.length}`);
            console.log(`- Total statuses: ${statuses.length}`);
            console.log(`- Failed statuses: ${failedStatuses.length}`);
            console.log(`- All checks passed: ${allChecksPassed}`);
            console.log(`- Has required checks: ${hasRequiredChecks}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º reviews
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner,
              repo,
              pull_number: prNumber
            });
            
            const approvedReviews = reviews.filter(review => review.state === 'APPROVED');
            const requestedChanges = reviews.filter(review => review.state === 'CHANGES_REQUESTED');
            
            // –î–ª—è dependabot PRs –Ω–µ —Ç—Ä–µ–±—É–µ–º review, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - —Ç—Ä–µ–±—É–µ–º
            const needsReview = pr.user.login !== 'dependabot[bot]';
            const hasApproval = approvedReviews.length > 0 && requestedChanges.length === 0;
            
            console.log(`Reviews status:`);
            console.log(`- Needs review: ${needsReview}`);
            console.log(`- Approved reviews: ${approvedReviews.length}`);
            console.log(`- Requested changes: ${requestedChanges.length}`);
            console.log(`- Has approval: ${hasApproval}`);
            
            const canMerge = allChecksPassed && 
                           hasRequiredChecks && 
                           (!needsReview || hasApproval);
            
            core.setOutput('can_merge', canMerge);
            core.setOutput('checks_passed', allChecksPassed);
            core.setOutput('has_approval', hasApproval);
            core.setOutput('needs_review', needsReview);

      - name: üöÄ Auto merge PR
        if: |
          steps.check.outputs.eligible == 'true' && 
          steps.status.outputs.can_merge == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const prNumber = ${{ steps.check.outputs.pr_number }};
            const prTitle = '${{ steps.check.outputs.pr_title }}';
            const prAuthor = '${{ steps.check.outputs.pr_author }}';
            
            try {
              console.log(`üöÄ Auto-merging PR #${prNumber}: ${prTitle}`);
              
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ —Å–ª–∏—è–Ω–∏—è
              let mergeMethod = 'squash'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
              
              // –î–ª—è dependabot –∏—Å–ø–æ–ª—å–∑—É–µ–º squash
              if (prAuthor === 'dependabot[bot]') {
                mergeMethod = 'squash';
              }
              // –î–ª—è –¥—Ä—É–≥–∏—Ö –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å merge
              else if (prTitle.startsWith('feat:') || prTitle.startsWith('fix:')) {
                mergeMethod = 'squash';
              }
              
              const result = await github.rest.pulls.merge({
                owner,
                repo,
                pull_number: prNumber,
                merge_method: mergeMethod,
                commit_title: `${prTitle} (#${prNumber})`,
                commit_message: `Automatically merged by GitHub Actions\n\nAuthor: ${prAuthor}\nMerge method: ${mergeMethod}`
              });
              
              if (result.data.merged) {
                console.log('‚úÖ PR successfully merged');
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ successful merge
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: prNumber,
                  body: `ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ª–∏—è–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ**\n\n‚úÖ PR –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω —Å main –≤–µ—Ç–∫–æ–π –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫.\n\n**–î–µ—Ç–∞–ª–∏:**\n- –ú–µ—Ç–æ–¥ —Å–ª–∏—è–Ω–∏—è: \`${mergeMethod}\`\n- Commit SHA: \`${result.data.sha}\`\n- –í—ã–ø–æ–ª–Ω–µ–Ω–æ: GitHub Actions\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–∫–ª–∞–¥! üôè`
                });
                
              } else {
                console.log('‚ùå Failed to merge PR');
                core.setFailed('Failed to merge PR');
              }
              
            } catch (error) {
              console.log('‚ùå Error during auto-merge:', error.message);
              
              // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–± –æ—à–∏–±–∫–µ
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: prNumber,
                body: `ü§ñ **–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–ª–∏—è–Ω–∏—è**\n\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —ç—Ç–æ—Ç PR.\n\n**–û—à–∏–±–∫–∞:** ${error.message}\n\n**–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**\n- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤\n- –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏\n- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é\n\n**–ü–æ–º–æ—â—å:** –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–∞–µ—Ç—Å—è, —Å–æ–∑–¥–∞–π—Ç–µ issue —Å –¥–µ—Ç–∞–ª—è–º–∏.`
              });
              
              core.setFailed(`Auto-merge failed: ${error.message}`);
            }

      - name: üìä Log auto-merge attempt
        if: always() && steps.check.outputs.eligible == 'true'
        run: |
          echo "## ü§ñ Auto-Merge Attempt Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**PR Information:**" >> $GITHUB_STEP_SUMMARY
          echo "- Number: #${{ steps.check.outputs.pr_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- Title: ${{ steps.check.outputs.pr_title }}" >> $GITHUB_STEP_SUMMARY
          echo "- Author: ${{ steps.check.outputs.pr_author }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:**" >> $GITHUB_STEP_SUMMARY
          echo "- Eligible: ${{ steps.check.outputs.eligible }}" >> $GITHUB_STEP_SUMMARY
          echo "- Checks passed: ${{ steps.status.outputs.checks_passed }}" >> $GITHUB_STEP_SUMMARY
          echo "- Has approval: ${{ steps.status.outputs.has_approval }}" >> $GITHUB_STEP_SUMMARY
          echo "- Needs review: ${{ steps.status.outputs.needs_review }}" >> $GITHUB_STEP_SUMMARY
          echo "- Can merge: ${{ steps.status.outputs.can_merge }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY