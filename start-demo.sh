#!/bin/bash

# üé® MCP UI SDK - Auto Demo Launcher
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞

set -e  # –í—ã—Ö–æ–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–∫–∞–ª–∏ –∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é
if locale -a 2>/dev/null | grep -q "ru_RU.utf8\|ru_RU.UTF-8"; then
    export LANG=ru_RU.UTF-8
    export LC_CTYPE=ru_RU.UTF-8
elif locale -a 2>/dev/null | grep -q "C.UTF-8"; then
    export LANG=C.UTF-8
    export LC_CTYPE=C.UTF-8
elif locale -a 2>/dev/null | grep -q "en_US.utf8\|en_US.UTF-8"; then
    export LANG=en_US.UTF-8
    export LC_CTYPE=en_US.UTF-8
else
    # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ª–æ–∫–∞–ª–∏
    export LANG=C
    export LC_CTYPE=C
fi

# –£–±–∏—Ä–∞–µ–º LC_ALL —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
unset LC_ALL

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –≠–º–æ–¥–∑–∏
ROCKET="üöÄ"
GEAR="‚öôÔ∏è"
CHECK="‚úÖ"
CROSS="‚ùå"
INFO="‚ÑπÔ∏è"
DEMO="üé®"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
print_header() {
    echo -e "${PURPLE}================================${NC}"
    echo -e "${PURPLE}   $DEMO MCP UI SDK Demo Launcher${NC}"
    echo -e "${PURPLE}================================${NC}"
    echo ""
}

print_step() {
    echo -e "${BLUE}$GEAR $1${NC}"
}

print_success() {
    echo -e "${GREEN}$CHECK $1${NC}"
}

print_error() {
    echo -e "${RED}$CROSS $1${NC}"
}

print_info() {
    echo -e "${CYAN}$INFO $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∫–æ–º–∞–Ω–¥—ã
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
detect_browser() {
    if command_exists google-chrome; then
        echo "google-chrome"
    elif command_exists chromium-browser; then
        echo "chromium-browser"
    elif command_exists firefox; then
        echo "firefox"
    elif command_exists safari; then
        echo "safari"
    elif command_exists microsoft-edge; then
        echo "microsoft-edge"
    else
        echo ""
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è URL –≤ –±—Ä–∞—É–∑–µ—Ä–µ
open_browser() {
    local url="$1"
    local browser=$(detect_browser)
    
    if [[ -n "$browser" ]]; then
        print_step "–û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–µ–º–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ ($browser)..."
        
        if [[ "$browser" == "safari" ]]; then
            open "$url" 2>/dev/null || true
        else
            "$browser" "$url" >/dev/null 2>&1 &
        fi
        
        print_success "–î–µ–º–æ –æ—Ç–∫—Ä—ã—Ç–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ!"
        return 0
    else
        print_error "–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ URL –≤—Ä—É—á–Ω—É—é: $url"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
check_port() {
    local port="$1"
    if lsof -i ":$port" >/dev/null 2>&1; then
        return 0  # –ü–æ—Ä—Ç –∑–∞–Ω—è—Ç
    else
        return 1  # –ü–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
find_free_port() {
    local start_port=8080
    local max_attempts=20
    
    for ((i=0; i<max_attempts; i++)); do
        local port=$((start_port + i))
        if ! check_port "$port"; then
            echo "$port"
            return 0
        fi
    done
    
    echo "8080"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—Ç –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
start_web_server() {
    local port="$1"
    local demo_dir="$2"
    
    print_step "–ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É $port..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Python
    if command_exists python3; then
        python3 -m http.server "$port" --directory "$demo_dir" >/dev/null 2>&1 &
        local server_pid=$!
        print_success "–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (PID: $server_pid)"
        echo "$server_pid"
        return 0
    elif command_exists python; then
        python -m SimpleHTTPServer "$port" >/dev/null 2>&1 &
        local server_pid=$!
        print_success "–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (PID: $server_pid)"
        echo "$server_pid"
        return 0
    else
        print_error "Python –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º."
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
cleanup() {
    print_step "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    if [[ -n "$SERVER_PID" ]]; then
        kill "$SERVER_PID" 2>/dev/null || true
        wait "$SERVER_PID" 2>/dev/null || true
    fi
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö Python HTTP —Å–µ—Ä–≤–µ—Ä–æ–≤
    pkill -f "python.*http\.server.*$(basename "$(pwd)")" 2>/dev/null || true
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö pnpm dev —Å–µ—Ä–≤–µ—Ä–æ–≤
    pkill -f "pnpm.*dev" 2>/dev/null || true
    pkill -f "react-router.*dev" 2>/dev/null || true
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤
    local ports_to_check=("8080" "8081" "8082" "5173")
    for port in "${ports_to_check[@]}"; do
        if check_port "$port"; then
            local pid=$(lsof -ti ":$port" 2>/dev/null || true)
            if [[ -n "$pid" ]]; then
                kill -9 "$pid" 2>/dev/null || true
            fi
        fi
    done
    
    print_success "–í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–º–æ—â–∏
show_help() {
    echo -e "${YELLOW}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:${NC}"
    echo "  ./start-demo.sh [–æ–ø—Ü–∏–∏]"
    echo ""
    echo -e "${YELLOW}–û–ø—Ü–∏–∏:${NC}"
    echo "  -s, --static     –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—á–Ω—É—é –≤–µ—Ä—Å–∏—é (–±–µ–∑ —Å–µ—Ä–≤–µ—Ä–∞)"
    echo "  -p, --port PORT  –£–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 8080)"
    echo "  -h, --help       –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo "  --no-browser     –ù–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
    echo "  --stop           –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã"
    echo "  --status         –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"
    echo "  --mcp            –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–∫–∂–µ MCP —Å–µ—Ä–≤–µ—Ä (examples/server)"
    echo ""
    echo -e "${YELLOW}–ü—Ä–∏–º–µ—Ä—ã:${NC}"
    echo "  ./start-demo.sh                  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–ø—É—Å–∫"
    echo "  ./start-demo.sh --static         # –°—Ç–∞—Ç–∏—á–Ω–∞—è –≤–µ—Ä—Å–∏—è"
    echo "  ./start-demo.sh --port 3000      # –ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É 3000"
    echo "  ./start-demo.sh --no-browser     # –ë–µ–∑ –∞–≤—Ç–æ–æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞"
    echo "  ./start-demo.sh --mcp            # –ó–∞–ø—É—Å–∫ —Å MCP —Å–µ—Ä–≤–µ—Ä–æ–º"
    echo "  ./start-demo.sh --stop           # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã"
    echo "  ./start-demo.sh --status         # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤"
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
show_system_info() {
    print_info "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:"
    echo "  OS: $(uname -s) $(uname -r)"
    echo "  –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $(uname -m)"
    
    if command_exists python3; then
        echo "  Python3: $(python3 --version 2>&1)"
    elif command_exists python; then
        echo "  Python: $(python --version 2>&1)"
    else
        echo "  Python: –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    local browser=$(detect_browser)
    if [[ -n "$browser" ]]; then
        echo "  –ë—Ä–∞—É–∑–µ—Ä: $browser"
    else
        echo "  –ë—Ä–∞—É–∑–µ—Ä: –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
show_server_status() {
    print_header
    print_info "–°—Ç–∞—Ç—É—Å –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤:"
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–æ–≤
    local http_servers=$(ps aux | grep -E "python.*http\.server.*$(basename "$(pwd)")" | grep -v grep | wc -l)
    if [[ $http_servers -gt 0 ]]; then
        print_success "HTTP —Å–µ—Ä–≤–µ—Ä—ã: $http_servers –∞–∫—Ç–∏–≤–Ω—ã—Ö"
        ps aux | grep -E "python.*http\.server.*$(basename "$(pwd)")" | grep -v grep | while read -r line; do
            local port=$(echo "$line" | grep -o "http\.server [0-9]*" | cut -d' ' -f2)
            echo "  ‚Ä¢ –ü–æ—Ä—Ç $port (PID: $(echo "$line" | awk '{print $2}'))"
        done
    else
        print_error "HTTP —Å–µ—Ä–≤–µ—Ä—ã: –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
    local mcp_servers=$(ps aux | grep -E "(react-router|pnpm.*dev)" | grep -v grep | wc -l)
    if [[ $mcp_servers -gt 0 ]]; then
        print_success "MCP —Å–µ—Ä–≤–µ—Ä—ã: $mcp_servers –∞–∫—Ç–∏–≤–Ω—ã—Ö"
        ps aux | grep -E "(react-router|pnpm.*dev)" | grep -v grep | while read -r line; do
            echo "  ‚Ä¢ $(echo "$line" | awk '{print $11}') (PID: $(echo "$line" | awk '{print $2}'))"
        done
    else
        print_error "MCP —Å–µ—Ä–≤–µ—Ä—ã: –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤
    echo ""
    print_info "–ó–∞–Ω—è—Ç—ã–µ –ø–æ—Ä—Ç—ã:"
    local common_ports=("8080" "8081" "8082" "5173" "3000")
    local ports_found=false
    
    for port in "${common_ports[@]}"; do
        if check_port "$port"; then
            local pid=$(lsof -ti ":$port" 2>/dev/null || echo "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
            echo "  ‚Ä¢ –ü–æ—Ä—Ç $port –∑–∞–Ω—è—Ç (PID: $pid)"
            ports_found=true
        fi
    done
    
    if [[ "$ports_found" == false ]]; then
        echo "  –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ—Ä—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã"
    fi
    
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
stop_all_servers() {
    print_header
    cleanup
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    local remaining=$(ps aux | grep -E "(python.*http\.server|react-router|pnpm.*dev)" | grep -v grep | wc -l)
    if [[ $remaining -gt 0 ]]; then
        print_error "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ—Ü–µ—Å—Å—ã, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞..."
        pkill -9 -f "python.*http\.server" 2>/dev/null || true
        pkill -9 -f "react-router" 2>/dev/null || true
        pkill -9 -f "pnpm.*dev" 2>/dev/null || true
        sleep 1
    fi
    
    print_success "–í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞
start_mcp_server() {
    local mcp_dir="examples/server"
    
    if [[ ! -d "$mcp_dir" ]]; then
        print_error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è MCP —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $mcp_dir"
        return 1
    fi
    
    print_step "–ó–∞–ø—É—Å–∫–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if [[ ! -d "$mcp_dir/node_modules" ]]; then
        print_step "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ MCP —Å–µ—Ä–≤–µ—Ä–∞..."
        (cd "$mcp_dir" && pnpm install --silent) || {
            print_error "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π MCP —Å–µ—Ä–≤–µ—Ä–∞"
            return 1
        }
    fi
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ–Ω–µ
    (cd "$mcp_dir" && pnpm dev >/dev/null 2>&1 &) || {
        print_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞"
        return 1
    }
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
    print_step "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞..."
    local attempts=0
    local max_attempts=30
    
    while [[ $attempts -lt $max_attempts ]]; do
        if curl -s --connect-timeout 1 "http://localhost:5173" >/dev/null 2>&1; then
            print_success "MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:5173"
            return 0
        fi
        sleep 1
        ((attempts++))
    done
    
    print_error "MCP —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ $max_attempts —Å–µ–∫—É–Ω–¥"
    return 1
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    local static_mode=false
    local port=""
    local no_browser=false
    local start_mcp=false
    local demo_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    local demo_file="$demo_dir/demo.html"
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    while [[ $# -gt 0 ]]; do
        case $1 in
            -s|--static)
                static_mode=true
                shift
                ;;
            -p|--port)
                port="$2"
                shift 2
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            --no-browser)
                no_browser=true
                shift
                ;;
            --stop)
                stop_all_servers
                exit 0
                ;;
            --status)
                show_server_status
                exit 0
                ;;
            --mcp)
                start_mcp=true
                shift
                ;;
            --system-info)
                show_system_info
                exit 0
                ;;
            *)
                print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    print_header
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è demo.html
    if [[ ! -f "$demo_file" ]]; then
        print_error "–§–∞–π–ª demo.html –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ $demo_dir"
        print_info "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"
        exit 1
    fi
    
    print_success "–ù–∞–π–¥–µ–Ω demo.html: $demo_file"
    
    # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
    if [[ "$static_mode" == true ]]; then
        print_step "–ó–∞–ø—É—Å–∫ –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ..."
        
        local file_url="file://$demo_file"
        print_info "URL: $file_url"
        
        if [[ "$no_browser" == false ]]; then
            open_browser "$file_url"
        else
            print_info "–û—Ç–∫—Ä–æ–π—Ç–µ URL –≤ –±—Ä–∞—É–∑–µ—Ä–µ: $file_url"
        fi
        
        print_success "–°—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–µ–º–æ –≥–æ—Ç–æ–≤–æ!"
        exit 0
    fi
    
    # –†–µ–∂–∏–º —Å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–º
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞
    if [[ -z "$port" ]]; then
        port=$(find_free_port)
        print_info "–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç: $port"
    else
        if check_port "$port"; then
            print_error "–ü–æ—Ä—Ç $port —É–∂–µ –∑–∞–Ω—è—Ç"
            local free_port=$(find_free_port)
            print_info "–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç: $free_port"
            port="$free_port"
        fi
    fi
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    trap cleanup EXIT INT TERM
    
    # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    SERVER_PID=$(start_web_server "$port" "$demo_dir")
    
    if [[ -z "$SERVER_PID" ]]; then
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä"
        print_info "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º: ./start-demo.sh --static"
        exit 1
    fi
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    print_step "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞..."
    sleep 2
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
    local server_url="http://localhost:$port/demo.html"
    local max_attempts=10
    local attempt=1
    
    while [[ $attempt -le $max_attempts ]]; do
        if curl -s --connect-timeout 2 "$server_url" >/dev/null 2>&1; then
            break
        fi
        
        print_step "–ü–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts: –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞..."
        sleep 1
        ((attempt++))
    done
    
    if [[ $attempt -gt $max_attempts ]]; then
        print_error "–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
        exit 1
    fi
    
    print_success "–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: $server_url"
    
    # –û—Ç–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
    if [[ "$no_browser" == false ]]; then
        open_browser "$server_url"
    else
        print_info "–û—Ç–∫—Ä–æ–π—Ç–µ URL –≤ –±—Ä–∞—É–∑–µ—Ä–µ: $server_url"
    fi
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
    echo ""
    print_info "–î–µ–º–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!"
    print_info "URL: $server_url"
    print_info "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C"
    echo ""
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print_info "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ URL:"
    echo "  ‚Ä¢ –ì–∞–ª–µ—Ä–µ—è: http://localhost:$port/demo.html#gallery"
    echo "  ‚Ä¢ –ü–∞–Ω–µ–ª—å: http://localhost:$port/demo.html#dashboard"
    echo "  ‚Ä¢ –§–æ—Ä–º—ã: http://localhost:$port/demo.html#forms"
    echo ""
    
    # –ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    if [[ "$start_mcp" == true ]]; then
        start_mcp_server && {
            print_info "MCP —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:"
            echo "  ‚Ä¢ HTTP: http://localhost:5173/mcp"
            echo "  ‚Ä¢ SSE: http://localhost:5173/sse"
            echo ""
        }
    fi
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    print_info "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç... (–Ω–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)"
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    while true; do
        sleep 10
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        if ! kill -0 "$SERVER_PID" 2>/dev/null; then
            print_error "–í–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è"
            break
        fi
    done
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
if [[ ! -x "$0" ]]; then
    print_error "–°–∫—Ä–∏–ø—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
    print_info "–í—ã–ø–æ–ª–Ω–∏—Ç–µ: chmod +x start-demo.sh"
    exit 1
fi

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"