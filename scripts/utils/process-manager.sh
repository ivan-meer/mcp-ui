#!/bin/bash

# üîß Process Management Utilities
# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    local level=$1
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    case $level in
        "INFO")
            echo -e "${BLUE}[INFO]${NC} ${timestamp} - $message"
            ;;
        "SUCCESS")
            echo -e "${GREEN}[SUCCESS]${NC} ${timestamp} - $message"
            ;;
        "WARNING")
            echo -e "${YELLOW}[WARNING]${NC} ${timestamp} - $message"
            ;;
        "ERROR")
            echo -e "${RED}[ERROR]${NC} ${timestamp} - $message"
            ;;
        *)
            echo -e "${timestamp} - $message"
            ;;
    esac
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –ø–æ—Ä—Ç—É
check_port() {
    local port=$1
    local process=$(lsof -ti:$port 2>/dev/null)
    
    if [ ! -z "$process" ]; then
        return 0  # –ü–æ—Ä—Ç –∑–∞–Ω—è—Ç
    else
        return 1  # –ü–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω
    fi
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞ –ø–æ—Ä—Ç—É
get_port_info() {
    local port=$1
    local pid=$(lsof -ti:$port 2>/dev/null)
    
    if [ ! -z "$pid" ]; then
        local cmd=$(ps -p $pid -o comm= 2>/dev/null)
        local args=$(ps -p $pid -o args= 2>/dev/null)
        echo "PID: $pid, Command: $cmd, Args: $args"
    else
        echo "–ü–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω"
    fi
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ –ø–æ—Ä—Ç—É
kill_port() {
    local port=$1
    local force=${2:-false}
    
    local pid=$(lsof -ti:$port 2>/dev/null)
    
    if [ ! -z "$pid" ]; then
        log "INFO" "–ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É $port: PID $pid"
        
        if [ "$force" = "true" ]; then
            log "WARNING" "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ $pid"
            kill -9 $pid
        else
            log "INFO" "–ú—è–≥–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ $pid"
            kill $pid
            
            # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥, –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
            sleep 5
            if kill -0 $pid 2>/dev/null; then
                log "WARNING" "–ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞"
                kill -9 $pid
            fi
        fi
        
        sleep 1
        
        if ! kill -0 $pid 2>/dev/null; then
            log "SUCCESS" "–ü—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É $port –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            return 0
        else
            log "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É $port"
            return 1
        fi
    else
        log "INFO" "–ü–æ—Ä—Ç $port —Å–≤–æ–±–æ–¥–µ–Ω"
        return 0
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö Node.js –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
check_node_process() {
    local process_name=$1
    local pids=$(pgrep -f "$process_name" 2>/dev/null)
    
    if [ ! -z "$pids" ]; then
        log "INFO" "–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å—ã '$process_name': $pids"
        return 0
    else
        return 1
    fi
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –∏–º–µ–Ω–∏
kill_node_process() {
    local process_name=$1
    local force=${2:-false}
    
    local pids=$(pgrep -f "$process_name" 2>/dev/null)
    
    if [ ! -z "$pids" ]; then
        log "INFO" "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã '$process_name': $pids"
        
        for pid in $pids; do
            if [ "$force" = "true" ]; then
                kill -9 $pid
            else
                kill $pid
            fi
        done
        
        sleep 2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        local remaining=$(pgrep -f "$process_name" 2>/dev/null)
        if [ ! -z "$remaining" ]; then
            log "WARNING" "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞"
            kill -9 $remaining
        fi
        
        log "SUCCESS" "–ü—Ä–æ—Ü–µ—Å—Å—ã '$process_name' –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        return 0
    else
        log "INFO" "–ü—Ä–æ—Ü–µ—Å—Å—ã '$process_name' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        return 0
    fi
}

# –û–∂–∏–¥–∞–Ω–∏–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–∞
wait_for_port_free() {
    local port=$1
    local timeout=${2:-30}
    local elapsed=0
    
    log "INFO" "–û–∂–∏–¥–∞–Ω–∏–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–∞ $port (—Ç–∞–π–º–∞—É—Ç: ${timeout}—Å)"
    
    while check_port $port; do
        if [ $elapsed -ge $timeout ]; then
            log "ERROR" "–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–∞ $port"
            return 1
        fi
        
        sleep 1
        elapsed=$((elapsed + 1))
    done
    
    log "SUCCESS" "–ü–æ—Ä—Ç $port –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω"
    return 0
}

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ –ø–æ—Ä—Ç—É
wait_for_port_ready() {
    local port=$1
    local timeout=${2:-60}
    local elapsed=0
    
    log "INFO" "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ –ø–æ—Ä—Ç—É $port (—Ç–∞–π–º–∞—É—Ç: ${timeout}—Å)"
    
    while ! check_port $port; do
        if [ $elapsed -ge $timeout ]; then
            log "ERROR" "–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ –ø–æ—Ä—Ç—É $port"
            return 1
        fi
        
        sleep 1
        elapsed=$((elapsed + 1))
    done
    
    log "SUCCESS" "–°–µ—Ä–≤–∏—Å –Ω–∞ –ø–æ—Ä—Ç—É $port –∑–∞–ø—É—â–µ–Ω"
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependency() {
    local cmd=$1
    local install_hint=$2
    
    if ! command -v $cmd &> /dev/null; then
        log "ERROR" "$cmd –Ω–µ –Ω–∞–π–¥–µ–Ω"
        if [ ! -z "$install_hint" ]; then
            log "INFO" "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: $install_hint"
        fi
        return 1
    else
        log "SUCCESS" "$cmd –Ω–∞–π–¥–µ–Ω: $(which $cmd)"
        return 0
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ PID —Ñ–∞–π–ª–∞
create_pidfile() {
    local service_name=$1
    local pid=${2:-$$}
    local pidfile="/tmp/mcp-ui-${service_name}.pid"
    
    echo $pid > $pidfile
    log "INFO" "PID —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: $pidfile (PID: $pid)"
}

# –£–¥–∞–ª–µ–Ω–∏–µ PID —Ñ–∞–π–ª–∞
remove_pidfile() {
    local service_name=$1
    local pidfile="/tmp/mcp-ui-${service_name}.pid"
    
    if [ -f $pidfile ]; then
        rm $pidfile
        log "INFO" "PID —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: $pidfile"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ PID —Ñ–∞–π–ª–∞
check_pidfile() {
    local service_name=$1
    local pidfile="/tmp/mcp-ui-${service_name}.pid"
    
    if [ -f $pidfile ]; then
        local pid=$(cat $pidfile)
        if kill -0 $pid 2>/dev/null; then
            log "INFO" "–°–µ—Ä–≤–∏—Å $service_name —É–∂–µ –∑–∞–ø—É—â–µ–Ω (PID: $pid)"
            return 0
        else
            log "WARNING" "–ù–∞–π–¥–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π PID —Ñ–∞–π–ª, —É–¥–∞–ª—è–µ–º"
            rm $pidfile
            return 1
        fi
    else
        return 1
    fi
}

# –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
export -f log check_port get_port_info kill_port check_node_process kill_node_process
export -f wait_for_port_free wait_for_port_ready check_dependency
export -f create_pidfile remove_pidfile check_pidfile