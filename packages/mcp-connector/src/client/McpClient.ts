/**
 * üîå MCP CLIENT IMPLEMENTATION
 * 
 * üìö –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –ó–ê–ú–ï–¢–ö–ê:
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏.
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–æ–ª–Ω—ã–π MCP –ø—Ä–æ—Ç–æ–∫–æ–ª —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤.
 * 
 * üéØ –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –†–ï–®–ï–ù–ò–Ø:
 * 1. Event-driven Architecture - –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è
 * 2. Promise-based API - async/await –¥–ª—è –≤—Å–µ—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π  
 * 3. Transport Abstraction - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ WebSocket, SSE, HTTP
 * 4. Error Recovery - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ retry logic
 * 5. Type Safety - –ø–æ–ª–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 */

import { EventEmitter } from 'events';
import type {
  IMcpClient,
  McpClientConfig,
  McpClientEvents,
  McpConnectionStatus,
  McpMessage,
  McpRequest,
  McpResponse,
  McpNotification,
  McpError,
  McpClientStats,
  CallToolOptions,
  GetResourceOptions,
} from '../types/client';
import type { Transport, TransportEvents } from '../types/transport';
import type { McpServer, McpTool, McpResource } from '../types/server';
import { McpClientError } from '../utils/errors';
import { validateMcpMessage } from '../utils/validation';
import { 
  DEFAULT_CLIENT_CONFIG, 
  CONNECTION_TIMEOUTS,
  RETRY_STRATEGIES 
} from '../constants';

/**
 * üîå MCP Client Implementation
 * 
 * üöÄ –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
 * - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP —Å–µ—Ä–≤–µ—Ä–∞–º —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–±–æ—è—Ö
 * - Type-safe –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
 * - Event-driven —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
 * - –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
 */
export class McpClient extends EventEmitter implements IMcpClient {
  // üìä –ü–†–ò–í–ê–¢–ù–´–ï –ü–û–õ–Ø
  private _config: McpClientConfig;
  private _transport: Transport;
  private _status: McpConnectionStatus = 'disconnected';
  private _server: McpServer | null = null;
  private _tools: McpTool[] = [];
  private _resources: McpResource[] = [];
  private _stats: McpClientStats;
  private _requestId = 0;
  private _pendingRequests = new Map<string | number, {
    resolve: (value: unknown) => void;
    reject: (error: Error) => void;
    timeout: NodeJS.Timeout;
    timestamp: Date;
  }>();
  private _retryAttempt = 0;
  private _retryTimeout: NodeJS.Timeout | null = null;
  private _heartbeatInterval: NodeJS.Timeout | null = null;
  
  // üèóÔ∏è –ö–û–ù–°–¢–†–£–ö–¢–û–†
  constructor(config: McpClientConfig) {
    super();
    
    // üìã –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π
    this._config = { ...DEFAULT_CLIENT_CONFIG, ...config };
    this._transport = config.transport;
    
    // üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this._stats = {
      connectedAt: null,
      messagesSent: 0,
      messagesReceived: 0,
      errors: 0,
      reconnections: 0,
      averageLatency: 0,
    };
    
    // üîó –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    this._setupTransportHandlers();
    
    // üìù –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    if (this._config.enableLogging) {
      console.log('üîå MCP Client —Å–æ–∑–¥–∞–Ω:', {
        transport: this._transport.type,
        autoReconnect: this._config.autoReconnect,
      });
    }
  }
  
  // üìä –ü–£–ë–õ–ò–ß–ù–´–ï –°–í–û–ô–°–¢–í–ê
  get status(): McpConnectionStatus {
    return this._status;
  }
  
  get server(): McpServer | null {
    return this._server;
  }
  
  get tools(): McpTool[] {
    return [...this._tools]; // üõ°Ô∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  }
  
  get resources(): McpResource[] {
    return [...this._resources]; // üõ°Ô∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  }
  
  get stats(): McpClientStats {
    return { ...this._stats }; // üõ°Ô∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  }
  
  // üîó –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï
  async connect(): Promise<void> {
    if (this._status === 'connected' || this._status === 'connecting') {
      return; // üö´ –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
    }
    
    try {
      this._setStatus('connecting');
      
      // ‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const connectPromise = this._transport.connect();
      const timeoutPromise = new Promise<never>((_, reject) => {
        setTimeout(() => {
          reject(new McpClientError('Connection timeout', 'TIMEOUT'));
        }, this._config.connectionTimeout);
      });
      
      await Promise.race([connectPromise, timeoutPromise]);
      
      // ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
      this._setStatus('connected');
      this._stats.connectedAt = new Date();
      this._retryAttempt = 0;
      
      // üíì –ó–∞–ø—É—Å–∫–∞–µ–º heartbeat –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
      if (this._config.heartbeatInterval) {
        this._startHeartbeat();
      }
      
      // üìã –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
      await this._initializeServer();
      
      // üìù –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      if (this._config.enableLogging) {
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MCP —Å–µ—Ä–≤–µ—Ä—É:', this._server?.name);
      }
      
    } catch (error) {
      this._setStatus('error');
      this._stats.errors++;
      
      const mcpError = error instanceof McpClientError 
        ? error 
        : new McpClientError(`Connection failed: ${error}`, 'CONNECTION_FAILED');
      
      this._emitError(mcpError, 'connect');
      
      // üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
      if (this._config.autoReconnect) {
        this._scheduleReconnect();
      }
      
      throw mcpError;
    }
  }
  
  // üíî –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï
  async disconnect(): Promise<void> {
    if (this._status === 'disconnected') {
      return; // üö´ –£–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã
    }
    
    try {
      // üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º heartbeat –∏ retry
      this._stopHeartbeat();
      this._cancelRetry();
      
      // üö´ –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ pending –∑–∞–ø—Ä–æ—Å—ã
      this._cancelPendingRequests('Client disconnecting');
      
      // üíî –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
      await this._transport.disconnect();
      
      this._setStatus('disconnected');
      this._stats.connectedAt = null;
      
      if (this._config.enableLogging) {
        console.log('üíî –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞');
      }
      
    } catch (error) {
      this._emitError(error, 'disconnect');
      throw error;
    }
  }
  
  // üì§ –û–¢–ü–†–ê–í–ö–ê –ó–ê–ü–†–û–°–ê
  async send<T = unknown>(request: McpRequest): Promise<T> {
    if (this._status !== 'connected') {
      throw new McpClientError('Not connected to server', 'NOT_CONNECTED');
    }
    
    // üÜî –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    if (!request.id) {
      request.id = this._generateRequestId();
    }
    
    // ‚è∞ –î–æ–±–∞–≤–ª—è–µ–º timestamp
    request.timestamp = new Date();
    
    // ‚úÖ –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const validationResult = validateMcpMessage(request);
    if (!validationResult.success) {
      throw new McpClientError(
        `Invalid request: ${validationResult.error}`, 
        'INVALID_REQUEST'
      );
    }
    
    return new Promise<T>((resolve, reject) => {
      // ‚è±Ô∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
      const timeout = setTimeout(() => {
        this._pendingRequests.delete(request.id!);
        reject(new McpClientError('Request timeout', 'TIMEOUT'));
      }, CONNECTION_TIMEOUTS.REQUEST);
      
      // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
      this._pendingRequests.set(request.id!, {
        resolve: resolve as (value: unknown) => void,
        reject,
        timeout,
        timestamp: new Date(),
      });
      
      // üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
      this._transport.send(request).catch(error => {
        this._pendingRequests.delete(request.id!);
        clearTimeout(timeout);
        reject(error);
      });
      
      // üìä –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this._stats.messagesSent++;
    });
  }
  
  // üì° –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
  async notify(notification: McpNotification): Promise<void> {
    if (this._status !== 'connected') {
      throw new McpClientError('Not connected to server', 'NOT_CONNECTED');
    }
    
    // ‚è∞ –î–æ–±–∞–≤–ª—è–µ–º timestamp
    notification.timestamp = new Date();
    
    // ‚úÖ –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const validationResult = validateMcpMessage(notification);
    if (!validationResult.success) {
      throw new McpClientError(
        `Invalid notification: ${validationResult.error}`, 
        'INVALID_NOTIFICATION'
      );
    }
    
    await this._transport.send(notification);
    this._stats.messagesSent++;
  }
  
  // üõ†Ô∏è –í–´–ó–û–í –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê
  async callTool(
    name: string, 
    args: Record<string, unknown> = {},
    options: CallToolOptions = {}
  ): Promise<unknown> {
    // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    const tool = this._tools.find(t => t.name === name);
    if (!tool) {
      throw new McpClientError(`Tool '${name}' not found`, 'TOOL_NOT_FOUND');
    }
    
    // üìù –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    if (this._config.enableLogging) {
      console.log(`üõ†Ô∏è –í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: ${name}`, args);
    }
    
    // üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await this.send<{ result?: unknown; error?: McpError }>({
      jsonrpc: '2.0',
      method: 'tools/call',
      params: {
        name,
        arguments: args,
      },
    });
    
    // ‚ùå –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
    if (response.error) {
      throw new McpClientError(
        `Tool execution failed: ${response.error.message}`,
        'TOOL_EXECUTION_FAILED',
        { toolName: name, originalError: response.error }
      );
    }
    
    return response.result;
  }
  
  // üìÅ –ü–û–õ–£–ß–ï–ù–ò–ï –†–ï–°–£–†–°–ê
  async getResource(uri: string, options: GetResourceOptions = {}): Promise<unknown> {
    // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞
    const resource = this._resources.find(r => r.uri === uri);
    if (!resource) {
      throw new McpClientError(`Resource '${uri}' not found`, 'RESOURCE_NOT_FOUND');
    }
    
    // üìù –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞
    if (this._config.enableLogging) {
      console.log(`üìÅ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞: ${uri}`);
    }
    
    // üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await this.send<{ contents?: unknown; error?: McpError }>({
      jsonrpc: '2.0',
      method: 'resources/read',
      params: {
        uri,
        ...options.params,
      },
    });
    
    // ‚ùå –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
    if (response.error) {
      throw new McpClientError(
        `Resource access failed: ${response.error.message}`,
        'RESOURCE_ACCESS_FAILED',
        { resourceUri: uri, originalError: response.error }
      );
    }
    
    return response.contents;
  }
  
  // üìã –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í
  async listTools(): Promise<McpTool[]> {
    const response = await this.send<{ tools: McpTool[] }>({
      jsonrpc: '2.0',
      method: 'tools/list',
    });
    
    this._tools = response.tools || [];
    this.emit('toolsUpdated', { tools: this._tools, timestamp: new Date() });
    
    return this._tools;
  }
  
  // üìã –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –†–ï–°–£–†–°–û–í
  async listResources(): Promise<McpResource[]> {
    const response = await this.send<{ resources: McpResource[] }>({
      jsonrpc: '2.0',
      method: 'resources/list',
    });
    
    this._resources = response.resources || [];
    this.emit('resourcesUpdated', { resources: this._resources, timestamp: new Date() });
    
    return this._resources;
  }
  
  // üßπ –û–ß–ò–°–¢–ö–ê –†–ï–°–£–†–°–û–í
  async destroy(): Promise<void> {
    // üíî –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
    if (this._status !== 'disconnected') {
      await this.disconnect();
    }
    
    // üóëÔ∏è –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    await this._transport.destroy();
    
    // üßπ –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–ª—É—à–∞—Ç–µ–ª–∏
    this.removeAllListeners();
    
    if (this._config.enableLogging) {
      console.log('üóëÔ∏è MCP Client —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
  }
  
  // üîß –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´
  
  /**
   * üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
   */
  private _setupTransportHandlers(): void {
    this._transport.on('connected', (data) => {
      if (this._config.enableLogging) {
        console.log('üîó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω:', data);
      }
    });
    
    this._transport.on('disconnected', (data) => {
      this._setStatus('disconnected');
      this._stats.connectedAt = null;
      
      this.emit('disconnected', {
        reason: data.reason,
        code: data.code,
        timestamp: data.timestamp,
      });
      
      // üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      if (this._config.autoReconnect && this._status !== 'closed') {
        this._scheduleReconnect();
      }
    });
    
    this._transport.on('message', (data) => {
      this._handleMessage(data.data);
      this._stats.messagesReceived++;
    });
    
    this._transport.on('error', (data) => {
      this._emitError(data.error, data.context);
    });
  }
  
  /**
   * üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  private _handleMessage(message: McpMessage): void {
    // üìä –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this._stats.messagesReceived++;
    
    // üéØ Emit —Å–æ–±—ã—Ç–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    this.emit('message', { message, timestamp: new Date() });
    
    // üì• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã
    if ('id' in message && message.id !== undefined) {
      const pending = this._pendingRequests.get(message.id);
      if (pending) {
        clearTimeout(pending.timeout);
        this._pendingRequests.delete(message.id);
        
        // üìä –û–±–Ω–æ–≤–ª—è–µ–º latency —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const latency = Date.now() - pending.timestamp.getTime();
        this._updateAverageLatency(latency);
        
        const response = message as McpResponse;
        if (response.error) {
          pending.reject(new McpClientError(
            response.error.message,
            'SERVER_ERROR',
            { code: response.error.code, data: response.error.data }
          ));
        } else {
          pending.resolve(response.result);
        }
      }
    }
    
    // üì° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if ('method' in message && !('id' in message)) {
      this._handleNotification(message as McpNotification);
    }
  }
  
  /**
   * üì° –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
   */
  private _handleNotification(notification: McpNotification): void {
    switch (notification.method) {
      case 'notifications/tools/list_changed':
        // üõ†Ô∏è –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        this.listTools().catch(error => {
          this._emitError(error, 'listTools');
        });
        break;
        
      case 'notifications/resources/list_changed':
        // üìÅ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤
        this.listResources().catch(error => {
          this._emitError(error, 'listResources');
        });
        break;
        
      default:
        // üìù –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (this._config.enableLogging) {
          console.log('üì° –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', notification.method);
        }
    }
  }
  
  /**
   * üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  private async _initializeServer(): Promise<void> {
    try {
      // üìã –ü–æ–ª—É—á–∞–µ–º capabilities —Å–µ—Ä–≤–µ—Ä–∞
      const initResponse = await this.send<{ 
        protocolVersion: string;
        capabilities: any;
        serverInfo: { name: string; version: string; };
      }>({
        jsonrpc: '2.0',
        method: 'initialize',
        params: {
          protocolVersion: '2024-11-05',
          capabilities: {
            roots: { listChanged: true },
            sampling: {},
          },
          clientInfo: {
            name: '@mcp-ui/mcp-connector',
            version: '1.0.0',
          },
        },
      });
      
      // üè∑Ô∏è –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–µ—Ä–≤–µ—Ä–∞
      this._server = {
        id: `server-${Date.now()}`,
        name: initResponse.serverInfo.name,
        version: initResponse.serverInfo.version,
        status: 'online',
        capabilities: initResponse.capabilities,
        transport: {
          type: this._transport.type,
          config: this._transport.config,
        },
        lastConnected: new Date(),
      };
      
      // üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ —Ä–µ—Å—É—Ä—Å–æ–≤
      await Promise.all([
        this.listTools().catch(() => []), // üõ°Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        this.listResources().catch(() => []), // üõ°Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
      ]);
      
      // üéØ –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      this.emit('connected', {
        server: this._server,
        timestamp: new Date(),
      });
      
    } catch (error) {
      throw new McpClientError(`Server initialization failed: ${error}`, 'INIT_FAILED');
    }
  }
  
  /**
   * üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
   */
  private _setStatus(newStatus: McpConnectionStatus): void {
    const oldStatus = this._status;
    this._status = newStatus;
    
    if (oldStatus !== newStatus) {
      this.emit('statusChange', {
        oldStatus,
        newStatus,
        timestamp: new Date(),
      });
      
      if (this._config.enableLogging) {
        console.log(`üìä –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω: ${oldStatus} ‚Üí ${newStatus}`);
      }
    }
  }
  
  /**
   * ‚ùå –≠–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
   */
  private _emitError(error: Error, context?: string): void {
    this._stats.errors++;
    
    this.emit('error', {
      error,
      context,
      timestamp: new Date(),
    });
    
    if (this._config.enableLogging) {
      console.error('‚ùå MCP Client –æ—à–∏–±–∫–∞:', error.message, context);
    }
  }
  
  /**
   * üîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  private _scheduleReconnect(): void {
    if (!this._config.autoReconnect || this._retryTimeout) {
      return;
    }
    
    const strategy = this._config.retryStrategy || RETRY_STRATEGIES.exponential;
    
    if (this._retryAttempt >= strategy.maxAttempts) {
      this._emitError(new McpClientError('Max reconnection attempts reached', 'MAX_RETRIES'));
      return;
    }
    
    // üìä –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
    const delay = Math.min(
      strategy.initialDelay * Math.pow(strategy.backoffFactor, this._retryAttempt),
      strategy.maxDelay
    );
    
    this._retryAttempt++;
    
    // üîÑ –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    this.emit('reconnecting', {
      attempt: this._retryAttempt,
      maxAttempts: strategy.maxAttempts,
      delay,
      timestamp: new Date(),
    });
    
    // ‚è±Ô∏è –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    this._retryTimeout = setTimeout(async () => {
      this._retryTimeout = null;
      this._setStatus('reconnecting');
      this._stats.reconnections++;
      
      try {
        await this.connect();
      } catch (error) {
        // üîÑ –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—É–¥–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      }
    }, delay);
  }
  
  /**
   * üõë –û—Ç–º–µ–Ω–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  private _cancelRetry(): void {
    if (this._retryTimeout) {
      clearTimeout(this._retryTimeout);
      this._retryTimeout = null;
    }
  }
  
  /**
   * üíì –ó–∞–ø—É—Å–∫ heartbeat
   */
  private _startHeartbeat(): void {
    if (this._heartbeatInterval) {
      return;
    }
    
    this._heartbeatInterval = setInterval(() => {
      if (this._status === 'connected') {
        this.notify({
          jsonrpc: '2.0',
          method: 'notifications/heartbeat',
        }).catch(error => {
          this._emitError(error, 'heartbeat');
        });
      }
    }, this._config.heartbeatInterval!);
  }
  
  /**
   * üíì –û—Å—Ç–∞–Ω–æ–≤–∫–∞ heartbeat
   */
  private _stopHeartbeat(): void {
    if (this._heartbeatInterval) {
      clearInterval(this._heartbeatInterval);
      this._heartbeatInterval = null;
    }
  }
  
  /**
   * üö´ –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö pending –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  private _cancelPendingRequests(reason: string): void {
    for (const [id, pending] of this._pendingRequests) {
      clearTimeout(pending.timeout);
      pending.reject(new McpClientError(reason, 'CANCELLED'));
    }
    this._pendingRequests.clear();
  }
  
  /**
   * üÜî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∑–∞–ø—Ä–æ—Å–∞
   */
  private _generateRequestId(): number {
    return ++this._requestId;
  }
  
  /**
   * üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π –∑–∞–¥–µ—Ä–∂–∫–∏
   */
  private _updateAverageLatency(latency: number): void {
    const count = this._stats.messagesSent;
    this._stats.averageLatency = (this._stats.averageLatency * (count - 1) + latency) / count;
  }
}

// üéØ –≠–ö–°–ü–û–†–¢
export default McpClient;

// üîß –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:
// TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É middleware –¥–ª—è pre/post –æ–±—Ä–∞–±–æ—Ç–∫–∏
// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å connection pooling –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
// TODO: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (performance.now())
// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å circuit breaker pattern –¥–ª—è fault tolerance
// FIXME: –£–ª—É—á—à–∏—Ç—å error recovery –¥–ª—è network failures
// HACK: –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π heartbeat, –Ω—É–∂–Ω–∞ –±–æ–ª–µ–µ —É–º–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è