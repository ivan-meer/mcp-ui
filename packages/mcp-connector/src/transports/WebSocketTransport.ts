/**
 * üì° WEBSOCKET TRANSPORT
 * 
 * üìö –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –ó–ê–ú–ï–¢–ö–ê:
 * WebSocket —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è real-time –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–π —Å–≤—è–∑–∏ —Å MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏.
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–æ–ª–Ω—ã–π lifecycle —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏.
 * 
 * üéØ –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –†–ï–®–ï–ù–ò–Ø:
 * 1. Event-driven Communication - –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ EventEmitter
 * 2. Auto-reconnection - intelligent –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å backoff
 * 3. Heartbeat/Ping-Pong - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 * 4. Message Queuing - –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ —Å–≤—è–∑–∏
 * 5. Error Recovery - graceful –æ–±—Ä–∞–±–æ—Ç–∫–∞ network failures
 */

import { EventEmitter } from 'events';
import WebSocket from 'ws';
import type { 
  Transport, 
  TransportEvents, 
  TransportStatus, 
  WebSocketConfig,
  TransportStats 
} from '../types/transport';
import type { McpMessage } from '../types/client';
import { McpClientError } from '../utils/errors';

/**
 * üì° WebSocket Transport Implementation
 * 
 * üöÄ –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
 * - –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ WebSocket –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å exponential backoff
 * - Ping/Pong –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è detection –æ—Ç–∫–ª—é—á–µ–Ω–∏–π
 * - Message buffering –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–±–æ—è—Ö
 * - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 */
export class WebSocketTransport extends EventEmitter implements Transport {
  // üìä –ü–£–ë–õ–ò–ß–ù–´–ï –°–í–û–ô–°–¢–í–ê
  public readonly type = 'websocket' as const;
  public readonly id: string;
  public readonly config: WebSocketConfig;
  
  // üìä –ü–†–ò–í–ê–¢–ù–´–ï –ü–û–õ–Ø
  private _status: TransportStatus = 'idle';
  private _ws: WebSocket | null = null;
  private _stats: TransportStats;
  private _messageQueue: McpMessage[] = [];
  private _pingInterval: NodeJS.Timeout | null = null;
  private _pongTimeout: NodeJS.Timeout | null = null;
  private _reconnectTimeout: NodeJS.Timeout | null = null;
  private _reconnectAttempt = 0;
  private _maxReconnectAttempts = 5;
  private _reconnectDelay = 1000;
  
  // üèóÔ∏è –ö–û–ù–°–¢–†–£–ö–¢–û–†
  constructor(config: WebSocketConfig) {
    super();
    
    this.id = `ws-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    this.config = {
      timeout: 30000,
      autoReconnect: true,
      pingInterval: 30000,
      pongTimeout: 5000,
      maxMessageSize: 1024 * 1024, // 1MB
      ...config,
    };
    
    // üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this._stats = {
      connectedAt: null,
      bytesSent: 0,
      bytesReceived: 0,
      messagesSent: 0,
      messagesReceived: 0,
      errors: 0,
      reconnections: 0,
      averageRTT: 0,
      lastPing: null,
    };
    
    console.log('üì° WebSocket Transport —Å–æ–∑–¥–∞–Ω:', this.id);
  }
  
  // üìä –ì–ï–¢–¢–ï–†–´
  get status(): TransportStatus {
    return this._status;
  }
  
  get stats(): TransportStats {
    return { ...this._stats };
  }
  
  // üîó –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï
  async connect(): Promise<void> {
    if (this._status === 'connected' || this._status === 'connecting') {
      return;
    }
    
    return new Promise((resolve, reject) => {
      try {
        this._setStatus('connecting');
        
        // üåê –°–æ–∑–¥–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        this._ws = new WebSocket(this.config.url, {
          timeout: this.config.timeout,
          headers: this.config.headers,
          ...(this.config.wsOptions || {}),
        });
        
        // ‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        const connectTimeout = setTimeout(() => {
          if (this._ws) {
            this._ws.terminate();
          }
          reject(new McpClientError('WebSocket connection timeout', 'TIMEOUT'));
        }, this.config.timeout);
        
        // ‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        this._ws.on('open', () => {
          clearTimeout(connectTimeout);
          this._setStatus('connected');
          this._stats.connectedAt = new Date();
          this._reconnectAttempt = 0;
          
          // üíì –ó–∞–ø—É—Å–∫–∞–µ–º ping/pong monitoring
          this._startPingPong();
          
          // üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
          this._flushMessageQueue();
          
          // üéØ –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
          this.emit('connected', { timestamp: new Date() });
          
          console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω:', this.config.url);
          resolve();
        });
        
        // üíî –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        this._ws.on('close', (code, reason) => {
          clearTimeout(connectTimeout);
          this._cleanup();
          
          const reasonStr = reason?.toString() || 'Unknown reason';
          console.log('üíî WebSocket –∑–∞–∫—Ä—ã—Ç:', code, reasonStr);
          
          this.emit('disconnected', {
            code,
            reason: reasonStr,
            timestamp: new Date(),
          });
          
          // üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
          if (this.config.autoReconnect && this._status !== 'closed') {
            this._scheduleReconnect();
          }
        });
        
        // üì® –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        this._ws.on('message', (data) => {
          try {
            this._handleMessage(data);
          } catch (error) {
            this._emitError(error, 'message_handling');
          }
        });
        
        // ‚ùå –û—à–∏–±–∫–∏ WebSocket
        this._ws.on('error', (error) => {
          clearTimeout(connectTimeout);
          this._emitError(error, 'websocket');
          
          if (this._status === 'connecting') {
            reject(error);
          }
        });
        
        // üèì Pong –æ—Ç–≤–µ—Ç—ã
        this._ws.on('pong', () => {
          if (this._pongTimeout) {
            clearTimeout(this._pongTimeout);
            this._pongTimeout = null;
          }
          
          // üìä –í—ã—á–∏—Å–ª—è–µ–º RTT
          if (this._stats.lastPing) {
            const rtt = Date.now() - this._stats.lastPing;
            this._updateAverageRTT(rtt);
          }
        });
        
      } catch (error) {
        this._setStatus('error');
        reject(error);
      }
    });
  }
  
  // üíî –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï
  async disconnect(): Promise<void> {
    if (this._status === 'disconnected') {
      return;
    }
    
    this._setStatus('disconnected');
    this._cleanup();
    
    if (this._ws) {
      // ü§ù Graceful close
      if (this._ws.readyState === WebSocket.OPEN) {
        this._ws.close(1000, 'Client disconnect');
      } else {
        this._ws.terminate();
      }
      this._ws = null;
    }
    
    console.log('üíî WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
  }
  
  // üì§ –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø
  async send(message: McpMessage): Promise<void> {
    if (this._status !== 'connected' || !this._ws) {
      // üì¶ –ë—É—Ñ–µ—Ä–∏–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ
      if (this.config.autoReconnect) {
        this._messageQueue.push(message);
        console.log('üì¶ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å');
        return;
      }
      
      throw new McpClientError('WebSocket not connected', 'NOT_CONNECTED');
    }
    
    try {
      const data = JSON.stringify(message);
      
      // üìè –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
      if (data.length > (this.config.maxMessageSize || 1024 * 1024)) {
        throw new McpClientError('Message too large', 'MESSAGE_TOO_LARGE');
      }
      
      this._ws.send(data);
      
      // üìä –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this._stats.messagesSent++;
      this._stats.bytesSent += data.length;
      
    } catch (error) {
      this._emitError(error, 'send');
      throw error;
    }
  }
  
  // üóëÔ∏è –£–ù–ò–ß–¢–û–ñ–ï–ù–ò–ï
  async destroy(): Promise<void> {
    await this.disconnect();
    this.removeAllListeners();
    console.log('üóëÔ∏è WebSocket Transport —É–Ω–∏—á—Ç–æ–∂–µ–Ω:', this.id);
  }
  
  // üîß –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´
  
  /**
   * üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  private _handleMessage(data: WebSocket.Data): void {
    try {
      const text = data.toString();
      
      // üìä –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this._stats.messagesReceived++;
      this._stats.bytesReceived += text.length;
      
      // üìã –ü–∞—Ä—Å–∏–º JSON
      const message = JSON.parse(text) as McpMessage;
      
      // üéØ –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      this.emit('message', {
        data: message,
        timestamp: new Date(),
      });
      
    } catch (error) {
      this._emitError(error, 'message_parsing');
    }
  }
  
  /**
   * üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
   */
  private _setStatus(newStatus: TransportStatus): void {
    const oldStatus = this._status;
    this._status = newStatus;
    
    if (oldStatus !== newStatus) {
      this.emit('statusChange', {
        oldStatus,
        newStatus,
        timestamp: new Date(),
      });
    }
  }
  
  /**
   * ‚ùå –≠–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
   */
  private _emitError(error: Error, context?: string): void {
    this._stats.errors++;
    
    this.emit('error', {
      error: error instanceof Error ? error : new Error(String(error)),
      context,
      timestamp: new Date(),
    });
  }
  
  /**
   * üíì –ó–∞–ø—É—Å–∫ ping/pong –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  private _startPingPong(): void {
    if (!this.config.pingInterval) {
      return;
    }
    
    this._pingInterval = setInterval(() => {
      if (this._ws && this._ws.readyState === WebSocket.OPEN) {
        // üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping
        this._stats.lastPing = Date.now();
        this._ws.ping();
        
        // ‚è±Ô∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è pong
        this._pongTimeout = setTimeout(() => {
          console.log('‚ö†Ô∏è Pong timeout - –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
          if (this._ws) {
            this._ws.terminate();
          }
        }, this.config.pongTimeout);
      }
    }, this.config.pingInterval);
  }
  
  /**
   * üíì –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ping/pong –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  private _stopPingPong(): void {
    if (this._pingInterval) {
      clearInterval(this._pingInterval);
      this._pingInterval = null;
    }
    
    if (this._pongTimeout) {
      clearTimeout(this._pongTimeout);
      this._pongTimeout = null;
    }
  }
  
  /**
   * üîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  private _scheduleReconnect(): void {
    if (this._reconnectTimeout || this._status === 'closed') {
      return;
    }
    
    if (this._reconnectAttempt >= this._maxReconnectAttempts) {
      this._setStatus('error');
      this._emitError(new McpClientError('Max reconnection attempts reached', 'MAX_RETRIES'));
      return;
    }
    
    // üìä Exponential backoff —Å jitter
    const delay = Math.min(
      this._reconnectDelay * Math.pow(2, this._reconnectAttempt) + Math.random() * 1000,
      30000 // –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
    );
    
    this._reconnectAttempt++;
    this._stats.reconnections++;
    
    console.log(`üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${Math.round(delay)}ms (–ø–æ–ø—ã—Ç–∫–∞ ${this._reconnectAttempt})`);
    
    // üéØ –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    this.emit('reconnecting', {
      attempt: this._reconnectAttempt,
      delay,
      timestamp: new Date(),
    });
    
    this._reconnectTimeout = setTimeout(async () => {
      this._reconnectTimeout = null;
      
      try {
        await this.connect();
      } catch (error) {
        // üîÑ –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—É–¥–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
      }
    }, delay);
  }
  
  /**
   * üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  private _flushMessageQueue(): void {
    if (this._messageQueue.length === 0) {
      return;
    }
    
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ ${this._messageQueue.length} –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π`);
    
    const messages = [...this._messageQueue];
    this._messageQueue = [];
    
    for (const message of messages) {
      this.send(message).catch(error => {
        // üì¶ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
        this._messageQueue.unshift(message);
        this._emitError(error, 'queue_flush');
      });
    }
  }
  
  /**
   * üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  private _cleanup(): void {
    this._setStatus('disconnected');
    this._stats.connectedAt = null;
    
    this._stopPingPong();
    
    if (this._reconnectTimeout) {
      clearTimeout(this._reconnectTimeout);
      this._reconnectTimeout = null;
    }
  }
  
  /**
   * üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ RTT
   */
  private _updateAverageRTT(rtt: number): void {
    const count = this._stats.messagesSent;
    if (count === 0) {
      this._stats.averageRTT = rtt;
    } else {
      this._stats.averageRTT = (this._stats.averageRTT * (count - 1) + rtt) / count;
    }
  }
}

// üéØ –≠–ö–°–ü–û–†–¢
export default WebSocketTransport;

// üéì –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–´–ï –ó–ê–ú–ï–¢–ö–ò:

/**
 * üí° WEBSOCKET LIFECYCLE:
 * 
 * üîÑ **Connection States**:
 * - CONNECTING (0) - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è
 * - OPEN (1) - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ
 * - CLOSING (2) - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è
 * - CLOSED (3) - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ
 * 
 * üéØ **Event Handling**:
 * - 'open' - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
 * - 'message' - –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
 * - 'close' - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ
 * - 'error' - –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
 * - 'ping'/'pong' - heartbeat –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 */

/**
 * üîÑ RECONNECTION STRATEGIES:
 * 
 * üìà **Exponential Backoff with Jitter**:
 * ```
 * delay = baseDelay * (2 ^ attempt) + random(0, 1000ms)
 * ```
 * 
 * ‚úÖ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞**:
 * - –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç "thundering herd" —ç—Ñ—Ñ–µ–∫—Ç
 * - –°–Ω–∏–∂–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏ –º–∞—Å—Å–æ–≤—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏—è—Ö
 * - Jitter –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
 * 
 * ‚ö†Ô∏è **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è**:
 * - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (cap)
 * - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
 * - Circuit breaker –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –æ—à–∏–±–∫–∞—Ö
 */

/**
 * üíì HEARTBEAT MECHANISM:
 * 
 * üèì **Ping/Pong Protocol**:
 * 1. –ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ping –∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥
 * 2. –°–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å pong –≤ —Ç–µ—á–µ–Ω–∏–µ timeout
 * 3. –ï—Å–ª–∏ pong –Ω–µ –ø–æ–ª—É—á–µ–Ω - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–º
 * 
 * üéØ **–¶–µ–ª–∏**:
 * - –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ "silent" —Ä–∞–∑—Ä—ã–≤–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 * - –ò–∑–º–µ—Ä–µ–Ω–∏–µ latency (RTT)
 * - –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ NAT/proxy
 */

// üîß –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:
// TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É WebSocket extensions (compression)
// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å circuit breaker pattern
// TODO: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è monitoring (Prometheus)
// TODO: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ WebSocket subprotocols
// FIXME: –£–ª—É—á—à–∏—Ç—å error recovery –¥–ª—è specific error codes
// HACK: –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –æ—á–µ—Ä–µ–¥—å, –Ω—É–∂–Ω–∞ persistent storage –¥–ª—è critical messages