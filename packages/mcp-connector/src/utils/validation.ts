/**
 * ‚úÖ MCP MESSAGE VALIDATION
 * 
 * üìö –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –ó–ê–ú–ï–¢–ö–ê:
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ MCP —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Zod schemas.
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç type safety –∏ runtime –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Å–µ—Ö MCP –æ–ø–µ—Ä–∞—Ü–∏–π.
 * 
 * üéØ –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –†–ï–®–ï–ù–ò–Ø:
 * 1. Schema-based Validation - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Zod –¥–ª—è –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * 2. Type Safety - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è TypeScript —Ç–∏–ø–æ–≤ –∏–∑ —Å—Ö–µ–º
 * 3. Detailed Error Messages - –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * 4. Performance - –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ö–µ–º
 */

import { z } from 'zod';
import type { McpMessage, McpRequest, McpResponse, McpNotification } from '../types/client';
import { MESSAGE_LIMITS, MCP_PROTOCOL_VERSION } from '../constants';
import { createValidationError } from './errors';

// üìã BASE SCHEMAS
/**
 * üî§ –û–±—â–∏–µ —Å—Ö–µ–º—ã –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 */

/** üÜî –°—Ö–µ–º–∞ –¥–ª—è ID (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —á–∏—Å–ª–æ) */
const IdSchema = z.union([z.string(), z.number()]);

/** üìù –°—Ö–µ–º–∞ –¥–ª—è –≤–µ—Ä—Å–∏–∏ JSON-RPC */
const JsonRpcVersionSchema = z.literal('2.0');

/** ‚è∞ –°—Ö–µ–º–∞ –¥–ª—è timestamp */
const TimestampSchema = z.date().optional();

/** üè∑Ô∏è –°—Ö–µ–º–∞ –¥–ª—è –∏–º–µ–Ω–∏ –º–µ—Ç–æ–¥–∞ */
const MethodNameSchema = z.string()
  .min(1, 'Method name cannot be empty')
  .max(100, 'Method name too long')
  .regex(/^[a-zA-Z][a-zA-Z0-9_/]*$/, 'Invalid method name format');

/** üìã –°—Ö–µ–º–∞ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ */
const ParamsSchema = z.record(z.unknown()).optional();

// üì® MESSAGE SCHEMAS
/**
 * üí¨ –°—Ö–µ–º—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ MCP —Å–æ–æ–±—â–µ–Ω–∏–π
 */

/** üì¶ –ë–∞–∑–æ–≤–∞—è —Å—Ö–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è */
const BaseMessageSchema = z.object({
  jsonrpc: JsonRpcVersionSchema,
  timestamp: TimestampSchema,
});

/** üì§ –°—Ö–µ–º–∞ –∑–∞–ø—Ä–æ—Å–∞ */
const RequestSchema = BaseMessageSchema.extend({
  id: IdSchema,
  method: MethodNameSchema,
  params: ParamsSchema,
});

/** üì• –°—Ö–µ–º–∞ –æ—Ç–≤–µ—Ç–∞ */
const ResponseSchema = BaseMessageSchema.extend({
  id: IdSchema,
  result: z.unknown().optional(),
  error: z.object({
    code: z.number(),
    message: z.string(),
    data: z.unknown().optional(),
  }).optional(),
}).refine(
  (data) => data.result !== undefined || data.error !== undefined,
  'Response must have either result or error'
);

/** üì° –°—Ö–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */
const NotificationSchema = BaseMessageSchema.extend({
  method: MethodNameSchema,
  params: ParamsSchema,
});

/** üì® –û–±—â–∞—è —Å—Ö–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è */
const MessageSchema = z.union([
  RequestSchema,
  ResponseSchema,
  NotificationSchema,
]);

// üõ†Ô∏è TOOL SCHEMAS
/**
 * üîß –°—Ö–µ–º—ã –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ MCP
 */

/** üìã JSON Schema –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ */
const JsonSchemaSchema: z.ZodSchema<any> = z.lazy(() =>
  z.object({
    type: z.enum(['string', 'number', 'integer', 'boolean', 'object', 'array', 'null']).optional(),
    description: z.string().optional(),
    minimum: z.number().optional(),
    maximum: z.number().optional(),
    minLength: z.number().optional(),
    maxLength: z.number().optional(),
    pattern: z.string().optional(),
    enum: z.array(z.unknown()).optional(),
    properties: z.record(JsonSchemaSchema).optional(),
    required: z.array(z.string()).optional(),
    items: JsonSchemaSchema.optional(),
    default: z.unknown().optional(),
    examples: z.array(z.unknown()).optional(),
  })
);

/** üîß –°—Ö–µ–º–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ */
const ToolSchema = z.object({
  name: z.string()
    .min(1, 'Tool name cannot be empty')
    .max(MESSAGE_LIMITS.MAX_TOOL_NAME_LENGTH, 'Tool name too long')
    .regex(/^[a-zA-Z][a-zA-Z0-9_-]*$/, 'Invalid tool name format'),
  description: z.string()
    .max(MESSAGE_LIMITS.MAX_DESCRIPTION_LENGTH, 'Description too long'),
  inputSchema: z.object({
    type: z.literal('object'),
    properties: z.record(JsonSchemaSchema).optional(),
    required: z.array(z.string()).optional(),
    additionalProperties: z.boolean().optional(),
  }),
  category: z.string().optional(),
  icon: z.string().optional(),
  metadata: z.record(z.unknown()).optional(),
  requiresConfirmation: z.boolean().optional(),
  estimatedDuration: z.number().positive().optional(),
});

// üìÅ RESOURCE SCHEMAS
/**
 * üìÑ –°—Ö–µ–º—ã –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤ MCP
 */

/** üîó –°—Ö–µ–º–∞ URI */
const UriSchema = z.string()
  .min(1, 'URI cannot be empty')
  .max(MESSAGE_LIMITS.MAX_URI_LENGTH, 'URI too long')
  .regex(/^[a-zA-Z][a-zA-Z0-9+.-]*:/, 'Invalid URI format');

/** üìÅ –°—Ö–µ–º–∞ —Ä–µ—Å—É—Ä—Å–∞ */
const ResourceSchema = z.object({
  uri: UriSchema,
  name: z.string().optional(),
  description: z.string()
    .max(MESSAGE_LIMITS.MAX_DESCRIPTION_LENGTH, 'Description too long')
    .optional(),
  mimeType: z.string().optional(),
  size: z.number().nonnegative().optional(),
  lastModified: z.date().optional(),
  tags: z.array(z.string()).optional(),
  metadata: z.record(z.unknown()).optional(),
  accessLevel: z.enum(['public', 'private', 'restricted']).optional(),
});

// üñ•Ô∏è SERVER SCHEMAS
/**
 * üè∑Ô∏è –°—Ö–µ–º—ã –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ
 */

/** üéõÔ∏è –°—Ö–µ–º–∞ capabilities —Å–µ—Ä–≤–µ—Ä–∞ */
const ServerCapabilitiesSchema = z.object({
  tools: z.object({
    listChanged: z.boolean().optional(),
  }).optional(),
  resources: z.object({
    subscribe: z.boolean().optional(),
    listChanged: z.boolean().optional(),
  }).optional(),
  prompts: z.object({
    listChanged: z.boolean().optional(),
  }).optional(),
  logging: z.object({
    levels: z.array(z.enum([
      'debug', 'info', 'notice', 'warning', 
      'error', 'critical', 'alert', 'emergency'
    ])).optional(),
  }).optional(),
  notifications: z.object({
    clientNotifications: z.boolean().optional(),
  }).optional(),
  experimental: z.record(z.unknown()).optional(),
});

/** üñ•Ô∏è –°—Ö–µ–º–∞ —Å–µ—Ä–≤–µ—Ä–∞ */
const ServerSchema = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string().optional(),
  version: z.string().optional(),
  url: z.string().optional(),
  status: z.enum(['online', 'offline', 'error', 'unknown']),
  capabilities: ServerCapabilitiesSchema,
  metadata: z.record(z.unknown()).optional(),
  lastConnected: z.date().optional(),
  transport: z.object({
    type: z.enum(['websocket', 'sse', 'local', 'http']),
    config: z.record(z.unknown()),
  }),
});

// üéØ VALIDATION FUNCTIONS
/**
 * ‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */

/**
 * üì® –í–∞–ª–∏–¥–∞—Ü–∏—è MCP —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export function validateMcpMessage(message: unknown): { success: true; data: McpMessage } | { success: false; error: string } {
  try {
    const result = MessageSchema.parse(message);
    return { success: true, data: result };
  } catch (error) {
    if (error instanceof z.ZodError) {
      const errorMessage = error.errors
        .map(err => `${err.path.join('.')}: ${err.message}`)
        .join('; ');
      return { success: false, error: errorMessage };
    }
    return { success: false, error: 'Unknown validation error' };
  }
}

/**
 * üì§ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
 */
export function validateRequest(request: unknown): { success: true; data: McpRequest } | { success: false; error: string } {
  try {
    const result = RequestSchema.parse(request);
    return { success: true, data: result };
  } catch (error) {
    if (error instanceof z.ZodError) {
      const errorMessage = error.errors
        .map(err => `${err.path.join('.')}: ${err.message}`)
        .join('; ');
      return { success: false, error: errorMessage };
    }
    return { success: false, error: 'Request validation failed' };
  }
}

/**
 * üì• –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
 */
export function validateResponse(response: unknown): { success: true; data: McpResponse } | { success: false; error: string } {
  try {
    const result = ResponseSchema.parse(response);
    return { success: true, data: result };
  } catch (error) {
    if (error instanceof z.ZodError) {
      const errorMessage = error.errors
        .map(err => `${err.path.join('.')}: ${err.message}`)
        .join('; ');
      return { success: false, error: errorMessage };
    }
    return { success: false, error: 'Response validation failed' };
  }
}

/**
 * üì° –í–∞–ª–∏–¥–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
export function validateNotification(notification: unknown): { success: true; data: McpNotification } | { success: false; error: string } {
  try {
    const result = NotificationSchema.parse(notification);
    return { success: true, data: result };
  } catch (error) {
    if (error instanceof z.ZodError) {
      const errorMessage = error.errors
        .map(err => `${err.path.join('.')}: ${err.message}`)
        .join('; ');
      return { success: false, error: errorMessage };
    }
    return { success: false, error: 'Notification validation failed' };
  }
}

/**
 * üîß –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
 */
export function validateTool(tool: unknown): { success: true; data: any } | { success: false; error: string } {
  try {
    const result = ToolSchema.parse(tool);
    return { success: true, data: result };
  } catch (error) {
    if (error instanceof z.ZodError) {
      const errorMessage = error.errors
        .map(err => `${err.path.join('.')}: ${err.message}`)
        .join('; ');
      return { success: false, error: errorMessage };
    }
    return { success: false, error: 'Tool validation failed' };
  }
}

/**
 * üìÅ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–∞
 */
export function validateResource(resource: unknown): { success: true; data: any } | { success: false; error: string } {
  try {
    const result = ResourceSchema.parse(resource);
    return { success: true, data: result };
  } catch (error) {
    if (error instanceof z.ZodError) {
      const errorMessage = error.errors
        .map(err => `${err.path.join('.')}: ${err.message}`)
        .join('; ');
      return { success: false, error: errorMessage };
    }
    return { success: false, error: 'Resource validation failed' };
  }
}

/**
 * üñ•Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
 */
export function validateServer(server: unknown): { success: true; data: any } | { success: false; error: string } {
  try {
    const result = ServerSchema.parse(server);
    return { success: true, data: result };
  } catch (error) {
    if (error instanceof z.ZodError) {
      const errorMessage = error.errors
        .map(err => `${err.path.join('.')}: ${err.message}`)
        .join('; ');
      return { success: false, error: errorMessage };
    }
    return { success: false, error: 'Server validation failed' };
  }
}

// üîç VALIDATION UTILITIES
/**
 * üõ†Ô∏è –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */

/**
 * üìè –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export function validateMessageSize(message: unknown): boolean {
  try {
    const serialized = JSON.stringify(message);
    return serialized.length <= MESSAGE_LIMITS.MAX_MESSAGE_SIZE;
  } catch {
    return false;
  }
}

/**
 * üî§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –º–µ—Ç–æ–¥–∞
 */
export function validateMethodName(method: string): boolean {
  return MethodNameSchema.safeParse(method).success;
}

/**
 * üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ URI
 */
export function validateUri(uri: string): boolean {
  return UriSchema.safeParse(uri).success;
}

/**
 * üè∑Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
 */
export function validateProtocolVersion(version: string): boolean {
  return version === MCP_PROTOCOL_VERSION;
}

/**
 * üìã –í–∞–ª–∏–¥–∞—Ü–∏—è JSON Schema
 */
export function validateJsonSchema(schema: unknown): boolean {
  return JsonSchemaSchema.safeParse(schema).success;
}

// üéØ TYPED VALIDATION GUARDS
/**
 * üõ°Ô∏è Type guards –¥–ª—è runtime –ø—Ä–æ–≤–µ—Ä–æ–∫
 */

/**
 * üì§ Type guard –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
 */
export function isRequest(message: McpMessage): message is McpRequest {
  return 'method' in message && 'id' in message;
}

/**
 * üì• Type guard –¥–ª—è –æ—Ç–≤–µ—Ç–∞
 */
export function isResponse(message: McpMessage): message is McpResponse {
  return 'id' in message && !('method' in message);
}

/**
 * üì° Type guard –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
export function isNotification(message: McpMessage): message is McpNotification {
  return 'method' in message && !('id' in message);
}

/**
 * ‚ùå Type guard –¥–ª—è –æ—à–∏–±–∫–∏
 */
export function isErrorResponse(response: McpResponse): boolean {
  return response.error !== undefined;
}

/**
 * ‚úÖ Type guard –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
 */
export function isSuccessResponse(response: McpResponse): boolean {
  return response.error === undefined && response.result !== undefined;
}

// üéì –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–´–ï –ó–ê–ú–ï–¢–ö–ò:

/**
 * üí° VALIDATION STRATEGY:
 * 
 * üéØ **Runtime Type Safety**:
 * - Zod –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–æ–≤ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ where possible
 * - –î–µ—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –¥–ª—è debugging
 * 
 * ‚úÖ **Performance Considerations**:
 * - –°—Ö–µ–º—ã –∫–æ–º–ø–∏–ª–∏—Ä—É—é—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
 * - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö
 * - Lazy validation –¥–ª—è complex nested objects
 * 
 * üõ°Ô∏è **Security Benefits**:
 * - –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ injection attacks —á–µ—Ä–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è DoS
 * - Sanitization –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö –ø–æ–ª–µ–π
 */

/**
 * üîÑ VALIDATION PATTERNS:
 * 
 * üìã **Schema Composition**:
 * ```typescript
 * const ExtendedSchema = BaseSchema.extend({
 *   additionalField: z.string()
 * });
 * ```
 * 
 * üéØ **Discriminated Unions**:
 * ```typescript
 * const MessageSchema = z.discriminatedUnion('type', [
 *   RequestSchema,
 *   ResponseSchema,
 *   NotificationSchema
 * ]);
 * ```
 * 
 * ‚úÖ **Custom Refinements**:
 * ```typescript
 * const Schema = z.object({}).refine(
 *   (data) => customValidation(data),
 *   'Custom validation failed'
 * );
 * ```
 */

export default {
  validateMcpMessage,
  validateRequest,
  validateResponse,
  validateNotification,
  validateTool,
  validateResource,
  validateServer,
  validateMessageSize,
  validateMethodName,
  validateUri,
  validateProtocolVersion,
  validateJsonSchema,
  isRequest,
  isResponse,
  isNotification,
  isErrorResponse,
  isSuccessResponse,
};