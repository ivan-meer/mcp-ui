/**
 * ‚ùå MCP CLIENT ERRORS
 * 
 * üìö –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –ó–ê–ú–ï–¢–ö–ê:
 * –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–ª–∞—Å—Å—ã –æ—à–∏–±–æ–∫ –¥–ª—è MCP –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏ –æ—à–∏–±–æ–∫
 * –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –ª—É—á—à–µ–≥–æ debugging.
 * 
 * üéØ –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –†–ï–®–ï–ù–ò–Ø:
 * 1. Error Hierarchy - –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ Error –∫–ª–∞—Å—Å–∞
 * 2. Error Codes - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–¥—ã –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
 * 3. Context Data - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è debugging
 * 4. Stack Preservation - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ call stack –¥–ª—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
 */

import { MCP_ERROR_CODES } from '../constants';

// üö® BASE ERROR CLASS
/**
 * üî¥ –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –æ—à–∏–±–æ–∫ MCP –∫–ª–∏–µ–Ω—Ç–∞
 * 
 * üéØ –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
 * - –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–¥—ã –æ—à–∏–±–æ–∫
 * - –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
 * - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ stack trace
 * - JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export class McpClientError extends Error {
  /** üè∑Ô∏è –¢–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è runtime –ø—Ä–æ–≤–µ—Ä–æ–∫ */
  public readonly type = 'McpClientError';
  
  /** üî¢ –ö–æ–¥ –æ—à–∏–±–∫–∏ */
  public readonly code: string;
  
  /** üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ */
  public readonly data?: unknown;
  
  /** ‚è∞ –í—Ä–µ–º—è –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏ */
  public readonly timestamp: Date;
  
  /** üîó –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å) */
  public readonly cause?: Error;
  
  constructor(
    message: string,
    code: string = 'UNKNOWN_ERROR',
    data?: unknown,
    cause?: Error
  ) {
    super(message);
    
    // üè∑Ô∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    this.name = 'McpClientError';
    
    this.code = code;
    this.data = data;
    this.timestamp = new Date();
    this.cause = cause;
    
    // üõ°Ô∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º stack trace –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, McpClientError);
    }
    
    // üîó –î–æ–±–∞–≤–ª—è–µ–º cause –≤ stack –µ—Å–ª–∏ –µ—Å—Ç—å
    if (cause && cause.stack) {
      this.stack += `\nCaused by: ${cause.stack}`;
    }
  }
  
  /**
   * üìÑ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ JSON –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  toJSON(): Record<string, unknown> {
    return {
      type: this.type,
      name: this.name,
      message: this.message,
      code: this.code,
      data: this.data,
      timestamp: this.timestamp.toISOString(),
      stack: this.stack,
      cause: this.cause ? {
        name: this.cause.name,
        message: this.cause.message,
        stack: this.cause.stack,
      } : undefined,
    };
  }
  
  /**
   * üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
   */
  static isInstance(error: unknown): error is McpClientError {
    return error instanceof Error && 
           (error as any).type === 'McpClientError';
  }
}

// üîå TRANSPORT ERRORS
/**
 * üì° –û—à–∏–±–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å–ª–æ—è
 */
export class TransportError extends McpClientError {
  public readonly type = 'TransportError';
  
  constructor(message: string, code: string, data?: unknown, cause?: Error) {
    super(message, code, data, cause);
    this.name = 'TransportError';
  }
}

// üìã PROTOCOL ERRORS
/**
 * üì® –û—à–∏–±–∫–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ MCP
 */
export class ProtocolError extends McpClientError {
  public readonly type = 'ProtocolError';
  
  constructor(message: string, code: string, data?: unknown, cause?: Error) {
    super(message, code, data, cause);
    this.name = 'ProtocolError';
  }
}

// üõ†Ô∏è TOOL ERRORS
/**
 * üîß –û—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
 */
export class ToolError extends McpClientError {
  public readonly type = 'ToolError';
  
  constructor(message: string, code: string, data?: unknown, cause?: Error) {
    super(message, code, data, cause);
    this.name = 'ToolError';
  }
}

// üìÅ RESOURCE ERRORS
/**
 * üìÑ –û—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏
 */
export class ResourceError extends McpClientError {
  public readonly type = 'ResourceError';
  
  constructor(message: string, code: string, data?: unknown, cause?: Error) {
    super(message, code, data, cause);
    this.name = 'ResourceError';
  }
}

// üîê AUTHENTICATION ERRORS
/**
 * üõ°Ô∏è –û—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
export class AuthenticationError extends McpClientError {
  public readonly type = 'AuthenticationError';
  
  constructor(message: string, code: string = 'AUTH_FAILED', data?: unknown, cause?: Error) {
    super(message, code, data, cause);
    this.name = 'AuthenticationError';
  }
}

// ‚è±Ô∏è TIMEOUT ERRORS
/**
 * üïí –û—à–∏–±–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞
 */
export class TimeoutError extends McpClientError {
  public readonly type = 'TimeoutError';
  
  constructor(message: string, timeoutMs: number, operation?: string) {
    super(
      message, 
      'TIMEOUT',
      { timeoutMs, operation }
    );
    this.name = 'TimeoutError';
  }
}

// üîÑ RETRY ERRORS
/**
 * üîÅ –û—à–∏–±–∫–∏ –ø—Ä–∏ –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ –ø–æ–ø—ã—Ç–æ–∫
 */
export class RetryError extends McpClientError {
  public readonly type = 'RetryError';
  
  constructor(message: string, attempts: number, lastError?: Error) {
    super(
      message,
      'MAX_RETRIES_EXCEEDED',
      { attempts },
      lastError
    );
    this.name = 'RetryError';
  }
}

// üìè VALIDATION ERRORS
/**
 * ‚úÖ –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
export class ValidationError extends McpClientError {
  public readonly type = 'ValidationError';
  
  constructor(message: string, field?: string, value?: unknown) {
    super(
      message,
      'VALIDATION_FAILED',
      { field, value }
    );
    this.name = 'ValidationError';
  }
}

// üè≠ ERROR FACTORY FUNCTIONS
/**
 * üîß –§–∞–±—Ä–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
 */

/**
 * üîå –°–æ–∑–¥–∞—Ç—å –æ—à–∏–±–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */
export function createConnectionError(
  message: string, 
  url?: string, 
  cause?: Error
): TransportError {
  return new TransportError(
    message,
    MCP_ERROR_CODES.CONNECTION_FAILED.toString(),
    { url },
    cause
  );
}

/**
 * ‚è±Ô∏è –°–æ–∑–¥–∞—Ç—å –æ—à–∏–±–∫—É —Ç–∞–π–º–∞—É—Ç–∞
 */
export function createTimeoutError(
  operation: string,
  timeoutMs: number
): TimeoutError {
  return new TimeoutError(
    `${operation} timed out after ${timeoutMs}ms`,
    timeoutMs,
    operation
  );
}

/**
 * üõ†Ô∏è –°–æ–∑–¥–∞—Ç—å –æ—à–∏–±–∫—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
 */
export function createToolError(
  toolName: string,
  message: string,
  cause?: Error
): ToolError {
  return new ToolError(
    `Tool '${toolName}': ${message}`,
    MCP_ERROR_CODES.TOOL_EXECUTION_FAILED.toString(),
    { toolName },
    cause
  );
}

/**
 * üìÅ –°–æ–∑–¥–∞—Ç—å –æ—à–∏–±–∫—É —Ä–µ—Å—É—Ä—Å–∞
 */
export function createResourceError(
  uri: string,
  message: string,
  cause?: Error
): ResourceError {
  return new ResourceError(
    `Resource '${uri}': ${message}`,
    MCP_ERROR_CODES.RESOURCE_NOT_FOUND.toString(),
    { uri },
    cause
  );
}

/**
 * üì® –°–æ–∑–¥–∞—Ç—å –æ—à–∏–±–∫—É –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
 */
export function createProtocolError(
  message: string,
  messageData?: unknown
): ProtocolError {
  return new ProtocolError(
    message,
    MCP_ERROR_CODES.PROTOCOL_ERROR.toString(),
    { messageData }
  );
}

/**
 * ‚úÖ –°–æ–∑–¥–∞—Ç—å –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
export function createValidationError(
  field: string,
  value: unknown,
  constraint: string
): ValidationError {
  return new ValidationError(
    `Validation failed for field '${field}': ${constraint}`,
    field,
    value
  );
}

// üîç ERROR ANALYSIS UTILITIES
/**
 * üïµÔ∏è –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫
 */

/**
 * üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π
 */
export function isRecoverableError(error: Error): boolean {
  if (McpClientError.isInstance(error)) {
    // üîå –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –æ–±—ã—á–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—ã
    if (error.code.includes('CONNECTION') || error.code.includes('TIMEOUT')) {
      return true;
    }
    
    // üö´ –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –Ω–µ—Ç
    if (error.code.includes('VALIDATION') || error.code.includes('AUTH')) {
      return false;
    }
    
    // üñ•Ô∏è –°–µ—Ä–≤–µ—Ä–Ω—ã–µ –æ—à–∏–±–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏
    if (error.code.startsWith('5')) {
      return true;
    }
  }
  
  return false;
}

/**
 * üìä –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—à–∏–±–∫–∏
 */
export function getErrorCategory(error: Error): string {
  if (McpClientError.isInstance(error)) {
    const code = parseInt(error.code);
    
    if (code >= 1000 && code < 2000) return 'transport';
    if (code >= 2000 && code < 3000) return 'protocol';
    if (code >= 3000 && code < 4000) return 'application';
    if (code >= 4000 && code < 5000) return 'client';
    if (code >= 5000 && code < 6000) return 'server';
  }
  
  return 'unknown';
}

/**
 * üéØ –ü–æ–ª—É—á–∏—Ç—å severity –æ—à–∏–±–∫–∏
 */
export function getErrorSeverity(error: Error): 'low' | 'medium' | 'high' | 'critical' {
  const category = getErrorCategory(error);
  
  switch (category) {
    case 'transport':
      return 'medium'; // üîå –°–µ—Ç–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã - —Å—Ä–µ–¥–Ω—è—è –≤–∞–∂–Ω–æ—Å—Ç—å
    case 'protocol':
      return 'high';   // üì® –ü—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ - –≤—ã—Å–æ–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å
    case 'application':
      return 'high';   // üéØ –ü—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –≤—ã—Å–æ–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å
    case 'client':
      return 'low';    // üë§ –û—à–∏–±–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ - –Ω–∏–∑–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å
    case 'server':
      return 'critical'; // üñ•Ô∏è –°–µ—Ä–≤–µ—Ä–Ω—ã–µ –æ—à–∏–±–∫–∏ - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å
    default:
      return 'medium';
  }
}

/**
 * üìù –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export function formatErrorForLogging(error: Error): string {
  if (McpClientError.isInstance(error)) {
    const category = getErrorCategory(error);
    const severity = getErrorSeverity(error);
    
    return `[${severity.toUpperCase()}][${category}] ${error.code}: ${error.message}`;
  }
  
  return `[UNKNOWN] ${error.name}: ${error.message}`;
}

// üéì –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–´–ï –ó–ê–ú–ï–¢–ö–ò:

/**
 * üí° ERROR HANDLING BEST PRACTICES:
 * 
 * ‚úÖ **Specific Error Types**:
 * - –†–∞–∑–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ—à–∏–±–æ–∫
 * - –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–¥—ã –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
 * - –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è debugging
 * 
 * ‚úÖ **Error Recovery**:
 * - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—ã—Ö –æ—à–∏–±–æ–∫
 * - Appropriate retry strategies
 * - Circuit breaker patterns –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è cascading failures
 * 
 * ‚úÖ **Error Reporting**:
 * - Structured logging —Å JSON serialization
 * - Error categorization –¥–ª—è –º–µ—Ç—Ä–∏–∫
 * - Severity levels –¥–ª—è alerting
 */

/**
 * üîÑ ERROR PROPAGATION PATTERNS:
 * 
 * üéØ **Catch and Wrap**:
 * ```typescript
 * try {
 *   await riskyOperation();
 * } catch (error) {
 *   throw new McpClientError('Operation failed', 'OP_FAILED', { context }, error);
 * }
 * ```
 * 
 * üéØ **Fail Fast**:
 * - –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ —Ä–∞–Ω–Ω–µ–º —ç—Ç–∞–ø–µ
 * - –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π fail –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
 * 
 * üéØ **Graceful Degradation**:
 * - Fallback –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ non-critical –æ—à–∏–±–∫–∞—Ö
 * - Partial functionality –≤–º–µ—Å—Ç–æ complete failure
 */

export default {
  McpClientError,
  TransportError,
  ProtocolError,
  ToolError,
  ResourceError,
  AuthenticationError,
  TimeoutError,
  RetryError,
  ValidationError,
  createConnectionError,
  createTimeoutError,
  createToolError,
  createResourceError,
  createProtocolError,
  createValidationError,
  isRecoverableError,
  getErrorCategory,
  getErrorSeverity,
  formatErrorForLogging,
};