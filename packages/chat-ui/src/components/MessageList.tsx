/**
 * üìú MESSAGE LIST COMPONENT
 * 
 * üìö –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –ó–ê–ú–ï–¢–ö–ê:
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
 * –û—Ç–¥–µ–ª–µ–Ω –æ—Ç ChatWindow –¥–ª—è –ª—É—á—à–µ–π –º–æ–¥—É–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
 * 
 * üéØ –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –†–ï–®–ï–ù–ò–Ø:
 * 1. Virtual Scrolling - –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—ã—Å—è—á —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * 2. Memoization - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤
 * 3. Intersection Observer - lazy loading –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
 * 4. Message Grouping - –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ–¥–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
 */

import React, { 
  useState, 
  useEffect, 
  useRef, 
  useCallback, 
  useMemo,
  memo 
} from 'react';
import { clsx } from 'clsx';
import { 
  Message, 
  MessageType,
  ChatWindowConfig,
  ChatEventData,
  MessageFilters,
  DEFAULT_CHAT_CONFIG 
} from '../types';
import { UIComponentRenderer } from '@mcp/ui-renderer';
import { isHtmlResourceBlock, UiActionEvent } from '@mcp/shared';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
// HACK: We might need to consider XSS implications more deeply if markdown allows arbitrary HTML.
// For now, react-markdown's default is to escape HTML.
// TODO: Explore options for syntax highlighting in code blocks.
// TODO: Consider adding other remark/rehype plugins for enhanced markdown features if needed.

// + INFO: Debounce function to limit rapid calls.
+ const debounce = <F extends (...args: any[]) => any>(func: F, waitFor: number) => {
+   let timeoutId: ReturnType<typeof setTimeout> | null = null;
+   return (...args: Parameters<F>): void => {
+     if (timeoutId) {
+       clearTimeout(timeoutId);
+     }
+     timeoutId = setTimeout(() => func(...args), waitFor);
+   };
+ };

// + HACK: Context menu positioning can be tricky; this is a basic implementation.
// + TODO: Improve context menu accessibility (keyboard navigation).
// + TODO: Consider a more robust context menu library for advanced features or if this becomes complex.
// + TODO: Add support for long-press on touch devices to open context menu.

+ interface ContextMenuProps {
+   x: number;
+   y: number;
+   actions: Array<{ label: string; onClick: () => void; disabled?: boolean; className?: string }>;
+   onClose: () => void;
+ }

+ const ContextMenu: React.FC<ContextMenuProps> = ({ x, y, actions, onClose }) => {
+   const menuRef = useRef<HTMLDivElement>(null);

+   useEffect(() => {
+     const handleClickOutside = (event: MouseEvent) => {
+       if (menuRef.current && !menuRef.current.contains(event.target as Node)) {
+         onClose();
+       }
+     };
+     document.addEventListener('mousedown', handleClickOutside);
+     return () => {
+       document.removeEventListener('mousedown', handleClickOutside);
+     };
+   }, [onClose]);

+   return (
+     <div
+       ref={menuRef}
+       className="absolute z-50 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-700 rounded-md shadow-lg py-1"
+       style={{ top: y, left: x }}
+     >
+       {actions.map((action, index) => (
+         <button
+           key={index}
+           onClick={() => {
+             action.onClick();
+             onClose();
+           }}
+           disabled={action.disabled}
+           className={clsx(
+             "block w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700",
+             "disabled:opacity-50 disabled:cursor-not-allowed",
+             action.className
+           )}
+         >
+           {action.label}
+         </button>
+       ))}
+     </div>
+   );
+ };


// üì¶ –ü–†–û–ü–°–´ –ö–û–ú–ü–û–ù–ï–ù–¢–ê
interface MessageListProps {
  /** üí¨ –ú–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è */
  messages: Message[];
  
  /** üéõÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è */
  config?: Partial<ChatWindowConfig>;
  
  /** üéØ Callback –¥–ª—è —Å–æ–±—ã—Ç–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π */
  onMessageEvent?: (event: ChatEventData) => void;
  
  /** üîç –§–∏–ª—å—Ç—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π */
  filters?: MessageFilters;
  
  /** üìè –í—ã—Å–æ—Ç–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏) */
  estimatedMessageHeight?: number;
  
  /** üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º */
  autoScroll?: boolean;
  
  /** ‚å®Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ */
  isTyping?: boolean;
  
  /** üé≠ –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π */
  messageRenderer?: (message: Message, index: number) => React.ReactNode;
  
  /** üìè –ö–∞—Å—Ç–æ–º–Ω—ã–µ CSS –∫–ª–∞—Å—Å—ã */
  className?: string;
}

/**
 * üìú –í–∏—Ä—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
 * 
 * üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:
 * - Virtual scrolling –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤
 * - Memoization –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤
 * - Intersection Observer –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
 * - Message grouping –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX
 */
export const MessageList: React.FC<MessageListProps> = memo(({
  messages,
  config = {},
  onMessageEvent,
  filters,
  estimatedMessageHeight = 80,
  autoScroll = true,
  isTyping = false,
  messageRenderer,
  className,
}) => {
  // üéõÔ∏è –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  const mergedConfig = { ...DEFAULT_CHAT_CONFIG, ...config };
  
  // üìù –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const [containerHeight, setContainerHeight] = useState(0);
  const [scrollTop, setScrollTop] = useState(0);
  const [isUserScrolling, setIsUserScrolling] = useState(false);
  
  // üìç Refs –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫—Ä–æ–ª–ª–æ–º –∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π
  const containerRef = useRef<HTMLDivElement>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const userScrollTimeoutRef = useRef<NodeJS.Timeout>();
  
  // üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
  const filteredMessages = useMemo(() => {
    if (!filters) return messages;
    
    return messages.filter(message => {
      // üìù –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
      if (filters.type) {
        const types = Array.isArray(filters.type) ? filters.type : [filters.type];
        if (!types.includes(message.type)) return false;
      }
      
      // üè∑Ô∏è –§–∏–ª—å—Ç—Ä –ø–æ —Å–µ—Ä–≤–µ—Ä—É
      if (filters.serverId && message.serverId !== filters.serverId) {
        return false;
      }
      
      // üìä –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
      if (filters.status) {
        const statuses = Array.isArray(filters.status) ? filters.status : [filters.status];
        if (!statuses.includes(message.status)) return false;
      }
      
      // üìÖ –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
      if (filters.dateRange) {
        const messageDate = message.timestamp;
        if (messageDate < filters.dateRange.from || messageDate > filters.dateRange.to) {
          return false;
        }
      }
      
      // üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
      if (filters.searchText) {
        const searchText = filters.searchText.toLowerCase();
        const content = typeof message.content === 'string' 
          ? message.content.toLowerCase()
          : '';
        if (!content.includes(searchText)) return false;
      }
      
      return true;
    });
  }, [messages, filters]);
  
  // üìä –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX
  const groupedMessages = useMemo(() => {
    const groups: Array<{
      id: string;
      messages: Message[];
      sender: string;
      timestamp: Date;
      type: MessageType;
    }> = [];
    
    filteredMessages.forEach(message => {
      const lastGroup = groups[groups.length - 1];
      
      // ü§ù –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –æ–¥–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ –∏–¥—É—Ç –ø–æ–¥—Ä—è–¥
      // –∏ —Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–Ω—å—à–µ 5 –º–∏–Ω—É—Ç
      if (
        lastGroup &&
        lastGroup.type === message.type &&
        lastGroup.sender === (message.serverName || 'user') &&
        (message.timestamp.getTime() - lastGroup.timestamp.getTime()) < 5 * 60 * 1000
      ) {
        lastGroup.messages.push(message);
        lastGroup.timestamp = message.timestamp;
      } else {
        // üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
        groups.push({
          id: `group-${message.id}`,
          messages: [message],
          sender: message.serverName || 'user',
          timestamp: message.timestamp,
          type: message.type,
        });
      }
    });
    
    return groups;
  }, [filteredMessages]);
  
  // üìè –í–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è - –≤—ã—á–∏—Å–ª—è–µ–º –≤–∏–¥–∏–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  const visibleRange = useMemo(() => {
    if (containerHeight === 0) return { start: 0, end: groupedMessages.length };
    
    const buffer = 5; // –ë—É—Ñ–µ—Ä –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    const visibleCount = Math.ceil(containerHeight / estimatedMessageHeight);
    const startIndex = Math.max(0, Math.floor(scrollTop / estimatedMessageHeight) - buffer);
    const endIndex = Math.min(groupedMessages.length, startIndex + visibleCount + buffer * 2);
    
    return { start: startIndex, end: endIndex };
  }, [containerHeight, scrollTop, estimatedMessageHeight, groupedMessages.length]);
  
  // üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
  const scrollToBottom = useCallback((force = false) => {
    // INFO: This function now gets debounced when called automatically.
    if ((autoScroll && !isUserScrolling) || force) {
      messagesEndRef.current?.scrollIntoView({ 
        behavior: 'smooth', // Consider 'auto' if 'smooth' causes issues with debouncing perception
        block: 'end'
      });
    }
  }, [autoScroll, isUserScrolling]);

  // INFO: Debounced version of scrollToBottom for automatic scrolling.
  const debouncedScrollToBottom = useMemo(() => {
    // TODO: Make debounce delay configurable if needed.
    return debounce(scrollToBottom, 150); // 150ms delay
  }, [scrollToBottom]);
  
  // üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  useEffect(() => {
    const resizeObserver = new ResizeObserver(entries => {
      const entry = entries[0];
      if (entry) {
        setContainerHeight(entry.contentRect.height);
      }
    });
    
    if (containerRef.current) {
      resizeObserver.observe(containerRef.current);
    }
    
    return () => resizeObserver.disconnect();
  }, []);
  
  // üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –ø—Ä–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º debounce)
  useEffect(() => {
    if (filteredMessages.length > 0) {
      debouncedScrollToBottom();
    }
    // No cleanup needed for this type of debounce if it manages its own timeout.
    // If the debounce function returned a cancel, we'd call it here.
  }, [filteredMessages.length, debouncedScrollToBottom]); // Dependency on debouncedScrollToBottom
  
  // ‚å®Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–æ–ª–ª–∞
  const handleScroll = useCallback((event: React.UIEvent<HTMLDivElement>) => {
    const target = event.currentTarget;
    setScrollTop(target.scrollTop);
    
    // üë§ –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫—Ä–æ–ª–ª–∏—Ç –≤—Ä—É—á–Ω—É—é
    setIsUserScrolling(true);
    
    // ‚è±Ô∏è –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
    if (userScrollTimeoutRef.current) {
      clearTimeout(userScrollTimeoutRef.current);
    }
    
    userScrollTimeoutRef.current = setTimeout(() => {
      setIsUserScrolling(false);
    }, 2000);
    
    // üîÑ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫—Ä–æ–ª–ª–∏—Ç –≤ —Å–∞–º—ã–π –Ω–∏–∑, –≤–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª
    const isAtBottom = target.scrollHeight - target.scrollTop <= target.clientHeight + 50;
    if (isAtBottom) {
      setIsUserScrolling(false);
    }
  }, []);
  
  // üé® CSS –∫–ª–∞—Å—Å—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  const containerClasses = clsx(
    'flex-1 overflow-y-auto custom-scrollbar',
    'scroll-smooth', // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
    className
  );
  
  return (
    <div 
      ref={containerRef}
      className={containerClasses}
      onScroll={handleScroll}
      role="log"
      aria-label="–°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞"
      aria-live="polite"
    >
      {/* üìä –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π */}
      <div className="relative">
        {/* üåü Empty state */}
        {filteredMessages.length === 0 ? (
          <EmptyMessageList filters={filters} />
        ) : (
          <>
            {/* üìè –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π spacer —Å–≤–µ—Ä—Ö—É */}
            {visibleRange.start > 0 && (
              <div 
                style={{ height: visibleRange.start * estimatedMessageHeight }}
                aria-hidden="true"
              />
            )}
            
            {/* üìú –í–∏–¥–∏–º—ã–µ –≥—Ä—É–ø–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π */}
            {groupedMessages
              .slice(visibleRange.start, visibleRange.end)
              .map((group, index) => (
                <MessageGroup
                  key={group.id}
                  group={group}
                  config={mergedConfig}
                  onMessageEvent={onMessageEvent}
                  messageRenderer={messageRenderer}
                  groupIndex={visibleRange.start + index}
                />
              ))}
            
            {/* üìè –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π spacer —Å–Ω–∏–∑—É */}
            {visibleRange.end < groupedMessages.length && (
              <div 
                style={{ 
                  height: (groupedMessages.length - visibleRange.end) * estimatedMessageHeight 
                }}
                aria-hidden="true"
              />
            )}
          </>
        )}
        
        {/* ‚å®Ô∏è –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ */}
        {isTyping && <TypingIndicator />}
        
        {/* üìç –ú–∞—Ä–∫–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ */}
        <div ref={messagesEndRef} />
      </div>
      
      {/* üîÑ –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –≤–Ω–∏–∑" */}
      {isUserScrolling && (
        <ScrollToBottomButton onClick={() => scrollToBottom(true)} />
      )}
    </div>
  );
});

MessageList.displayName = 'MessageList';

/**
 * üë• MESSAGE GROUP COMPONENT
 * 
 * üìö –ì—Ä—É–ø–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ–¥–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
 */
interface MessageGroupProps {
  group: {
    id: string;
    messages: Message[];
    sender: string;
    timestamp: Date;
    type: MessageType;
  };
  config: ChatWindowConfig;
  onMessageEvent?: (event: ChatEventData) => void;
  messageRenderer?: (message: Message, index: number) => React.ReactNode;
  groupIndex: number;
}

const MessageGroup: React.FC<MessageGroupProps> = memo(({
  group,
  config,
  onMessageEvent,
  messageRenderer,
  groupIndex,
}) => {
  // üé® –°—Ç–∏–ª–∏ –≥—Ä—É–ø–ø—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
  const groupClasses = clsx(
    'mb-4 last:mb-2',
    {
      'flex flex-col items-end': group.type === 'user',
      'flex flex-col items-start': group.type === 'assistant' || group.type === 'error',
      'flex flex-col items-center': group.type === 'system',
    }
  );
  
  // ‚è∞ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã
  const formatGroupTime = (date: Date) => {
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    const diffHours = Math.floor(diffMinutes / 60);
    const diffDays = Math.floor(diffHours / 24);
    
    if (diffMinutes < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    if (diffMinutes < 60) return `${diffMinutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    if (diffHours < 24) return `${diffHours} —á –Ω–∞–∑–∞–¥`;
    if (diffDays < 7) return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
    
    return new Intl.DateTimeFormat('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
    }).format(date);
  };
  
  return (
    <div className={groupClasses}>
      {/* üè∑Ô∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã (–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å + –≤—Ä–µ–º—è) */}
      {config.showTimestamps && (
        <div className="flex items-center space-x-2 mb-2 px-1">
          {config.showServerNames && group.sender !== 'user' && (
            <span className="text-sm font-medium text-text-secondary">
              {group.sender}
            </span>
          )}
          <span className="text-xs text-text-muted">
            {formatGroupTime(group.timestamp)}
          </span>
        </div>
      )}
      
      {/* üí¨ –°–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ */}
      <div className={clsx(
        'space-y-1 max-w-[70%]',
        {
          'items-end': group.type === 'user',
          'items-start': group.type !== 'user',
        }
      )}>
        {group.messages.map((message, messageIndex) => (
          <div key={message.id}>
            {messageRenderer ? (
              messageRenderer(message, groupIndex * 10 + messageIndex)
            ) : (
              <DefaultMessageRenderer 
                message={message}
                config={config}
                onMessageEvent={onMessageEvent}
                isFirstInGroup={messageIndex === 0}
                isLastInGroup={messageIndex === group.messages.length - 1}
              />
            )}
          </div>
        ))}
      </div>
    </div>
  );
});

MessageGroup.displayName = 'MessageGroup';

/**
 * üí¨ DEFAULT MESSAGE RENDERER
 * 
 * üìö –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
 */
interface DefaultMessageRendererProps {
  message: Message;
  config: ChatWindowConfig;
  onMessageEvent?: (event: ChatEventData) => void;
  isFirstInGroup: boolean;
  isLastInGroup: boolean;
}

const DefaultMessageRenderer: React.FC<DefaultMessageRendererProps> = memo(({
  message,
  config,
  onMessageEvent,
  isFirstInGroup,
  isLastInGroup,
}) => {
  const [contextMenu, setContextMenu] = useState<{ x: number; y: number; messageId: string } | null>(null);
  const messageRef = useRef<HTMLDivElement>(null); // Ref for the message bubble itself

  const isUserOrAssistant = message.type === 'user' || message.type === 'assistant';
  const contentIsString = typeof message.content === 'string';
  // Enable markdown by default, allow disabling via config
  // Corrected mergedConfig access, it's not directly available here, use config prop.
  const allowMarkdown = config?.markdown?.enabled !== false;


  const handleContextMenu = useCallback((event: React.MouseEvent) => {
    event.preventDefault();
    setContextMenu({ x: event.clientX, y: event.clientY, messageId: message.id });
  }, [message.id]);

  const closeContextMenu = useCallback(() => {
    setContextMenu(null);
  }, []);

  const getMessageTextContent = (msg: Message): string => {
    if (typeof msg.content === 'string') {
      return msg.content;
    }
    if (isHtmlResourceBlock(msg.content) && msg.content.type === 'resource' && typeof msg.content.text === 'string') {
        return msg.content.text;
    }
    return '';
  };

  const contextMenuActions = contextMenu && contextMenu.messageId === message.id ? [
    {
      label: 'Copy Text',
      onClick: async () => {
        const textToCopy = getMessageTextContent(message);
        if (textToCopy && navigator.clipboard) {
          try {
            await navigator.clipboard.writeText(textToCopy);
            if (onMessageEvent) {
              onMessageEvent({ type: 'systemNotification', payload: { text: 'Copied to clipboard!', level: 'info' }, messageId: message.id });
            }
          } catch (err) {
            console.error('Failed to copy text: ', err);
            if (onMessageEvent) {
              onMessageEvent({ type: 'systemNotification', payload: { text: 'Failed to copy text.', level: 'error' }, messageId: message.id });
            }
          }
        }
      },
      disabled: !getMessageTextContent(message)
    },
    ...(message.type === 'user' ? [{
      label: 'Delete Message',
      onClick: () => {
        if (onMessageEvent) {
          onMessageEvent({ type: 'requestDeleteMessage', messageId: message.id });
        }
      },
      className: "text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900"
    }] : [])
  ] : [];

  // üé® –°—Ç–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const messageClasses = clsx(
    'px-4 py-2 break-words transition-all duration-200',
    'hover:shadow-md group relative',
    {
      // üë§ –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      'bg-chat-user text-white rounded-2xl': message.type === 'user',
      'rounded-br-md': message.type === 'user' && isFirstInGroup,
      'rounded-tr-md': message.type === 'user' && isLastInGroup,
      
      // ü§ñ –°–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
      'bg-bg-secondary text-text-primary rounded-2xl': message.type === 'assistant',
      'rounded-bl-md': message.type === 'assistant' && isFirstInGroup,
      'rounded-tl-md': message.type === 'assistant' && isLastInGroup,
      
      // ‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      'bg-bg-tertiary text-text-secondary rounded-lg text-center text-sm': message.type === 'system',
      
      // üé® UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
      'bg-bg-elevated border border-border-primary rounded-lg p-0': message.type === 'ui-component',
      
      // ‚ùå –û—à–∏–±–∫–∏
      'bg-accent-error text-white rounded-2xl': message.type === 'error',
    }
  );
  
  return (
    <div
      ref={messageRef}
      className={messageClasses}
      onContextMenu={handleContextMenu}
    >
      {/* Wrapper for content to ensure context menu target area is consistent */}
      <div className="message-content-wrapper">
        {/* üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è */}
        {message.type === 'ui-component' ? (
        isHtmlResourceBlock(message.content) ? (
          <UIComponentRenderer
            resource={message.content}
            onEvent={(uiEvent: UiActionEvent) => {
              if (onMessageEvent) {
                onMessageEvent({ type: 'uiAction', payload: uiEvent, messageId: message.id });
              }
            }}
            className="mt-1"
          />
        ) : (
          <div className="p-2 text-red-500 border border-red-300 rounded mt-1">
            <p>Error: Invalid UI component data for ui-component. Expected HtmlResourceBlock.</p>
            <pre className="text-xs">{JSON.stringify(message.content, null, 2)}</pre>
          </div>
        )
      ) : contentIsString && isUserOrAssistant && allowMarkdown ? (
        // Apply Markdown rendering for user and assistant string messages
        // Using 'markdown-content' as Tailwind Typography is not confirmed.
        // Styling for 'markdown-content' class will need to be defined elsewhere in CSS.
        <ReactMarkdown
          className="markdown-content max-w-none"
          remarkPlugins={[remarkGfm]}
          // components={{ // Example for opening links in new tabs:
          //   a: ({node, ...props}) => <a {...props} target="_blank" rel="noopener noreferrer" />
          // }}
        >
          {message.content}
        </ReactMarkdown>
      ) : contentIsString && isUserOrAssistant && !allowMarkdown ? (
        // Fallback for user/assistant messages when markdown is explicitly disabled
        <div className="whitespace-pre-wrap select-text">{message.content}</div>
      ) : contentIsString ? (
        // For other message types (e.g., 'system') with string content, render as plain text
        <div className="whitespace-pre-wrap select-text">{message.content}</div>
      ) : (
        // Fallback for non-string, non-ui-component content structures
        <div className="p-4 text-center text-text-muted">
          <div className="text-2xl mb-2">‚ùì</div>
          <div className="font-medium">Unsupported message content structure</div>
          <pre className="text-xs">{JSON.stringify(message.content, null, 2)}</pre>
        </div>
      )}
      </div> {/* End of message-content-wrapper */}
      
      {/* üìä –°—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è */}
      {message.status !== 'completed' && (
        <div className="mt-1 text-xs opacity-75">
          <MessageStatusBadge status={message.status} />
        </div>
      )}
      
      {/* ‚ùå –û—à–∏–±–∫–∞ */}
      {message.error && (
        <div className="mt-2 p-2 bg-black bg-opacity-20 rounded text-xs">
          <div className="font-medium">–û—à–∏–±–∫–∞: {message.error.message}</div>
          {message.error.code && (
            <div className="opacity-75">–ö–æ–¥: {message.error.code}</div>
          )}
        </div>
      )}
      
      {/* üõ†Ô∏è –î–µ–π—Å—Ç–≤–∏—è —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø—Ä–∏ hover) */}
      <MessageActions 
        message={message}
        onMessageEvent={onMessageEvent}
      />

      {contextMenu && contextMenu.messageId === message.id && (
        <ContextMenu
          x={contextMenu.x}
          y={contextMenu.y}
          actions={contextMenuActions}
          onClose={closeContextMenu}
        />
      )}
    </div>
  );
});

DefaultMessageRenderer.displayName = 'DefaultMessageRenderer';

/**
 * üåü EMPTY MESSAGE LIST
 * 
 * üìö –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
 */
interface EmptyMessageListProps {
  filters?: MessageFilters;
}

const EmptyMessageList: React.FC<EmptyMessageListProps> = ({ filters }) => {
  const hasFilters = filters && Object.keys(filters).length > 0;
  
  return (
    <div className="flex flex-col items-center justify-center h-full text-center py-12">
      <div className="text-6xl mb-4">
        {hasFilters ? 'üîç' : 'üí¨'}
      </div>
      <h3 className="text-text-primary text-lg font-medium mb-2">
        {hasFilters ? '–°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ'}
      </h3>
      <p className="text-text-muted max-w-md">
        {hasFilters 
          ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Ö'
          : '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å MCP —Å–µ—Ä–≤–µ—Ä–æ–º'
        }
      </p>
      {hasFilters && (
        <button 
          className="mt-4 px-4 py-2 bg-accent-primary text-white rounded-lg hover:bg-blue-600 transition-colors"
          onClick={() => {
            // TODO: –î–æ–±–∞–≤–∏—Ç—å callback –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
          }}
        >
          –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
        </button>
      )}
    </div>
  );
};

/**
 * ‚å®Ô∏è TYPING INDICATOR
 * 
 * üìö –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
 */
const TypingIndicator: React.FC = () => (
  <div className="flex items-center space-x-3 px-4 py-3 mb-4">
    <div className="flex space-x-1">
      <div className="w-2 h-2 bg-text-muted rounded-full animate-bounce" style={{ animationDelay: '0ms' }} />
      <div className="w-2 h-2 bg-text-muted rounded-full animate-bounce" style={{ animationDelay: '150ms' }} />
      <div className="w-2 h-2 bg-text-muted rounded-full animate-bounce" style={{ animationDelay: '300ms' }} />
    </div>
    <span className="text-sm text-text-muted">–ü–µ—á–∞—Ç–∞–µ—Ç...</span>
  </div>
);

/**
 * üìä MESSAGE STATUS BADGE
 */
const MessageStatusBadge: React.FC<{ status: Message['status'] }> = ({ status }) => {
  const statusConfig = {
    sending: { icon: '‚è≥', text: '–û—Ç–ø—Ä–∞–≤–∫–∞', color: 'text-accent-warning' },
    sent: { icon: '‚úì', text: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', color: 'text-accent-success' },
    delivered: { icon: '‚úì‚úì', text: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ', color: 'text-accent-success' },
    failed: { icon: '‚ùå', text: '–û—à–∏–±–∫–∞', color: 'text-accent-error' },
    processing: { icon: 'üîÑ', text: '–û–±—Ä–∞–±–æ—Ç–∫–∞', color: 'text-accent-info' },
    completed: { icon: '‚úÖ', text: '–ì–æ—Ç–æ–≤–æ', color: 'text-accent-success' },
  };
  
  const config = statusConfig[status];
  
  return (
    <span className={clsx('flex items-center space-x-1 text-xs', config.color)}>
      <span className={status === 'processing' ? 'animate-spin' : ''}>{config.icon}</span>
      <span>{config.text}</span>
    </span>
  );
};

/**
 * üõ†Ô∏è MESSAGE ACTIONS
 */
const MessageActions: React.FC<{
  message: Message;
  onMessageEvent?: (event: ChatEventData) => void;
}> = ({ message, onMessageEvent }) => (
  <div className="absolute right-2 top-2 opacity-0 group-hover:opacity-100 transition-opacity">
    <div className="flex space-x-1">
      {/* üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å */}
      <button
        className="p-1 bg-bg-hover rounded hover:bg-bg-elevated transition-colors"
        onClick={() => {
          if (typeof message.content === 'string') {
            navigator.clipboard.writeText(message.content);
          }
        }}
        title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å"
      >
        üìã
      </button>
      
      {/* üóëÔ∏è –£–¥–∞–ª–∏—Ç—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π) */}
      {message.type === 'user' && (
        <button
          className="p-1 bg-bg-hover rounded hover:bg-accent-error hover:text-white transition-colors"
          onClick={() => {
            onMessageEvent?.({
              type: 'message-delete',
              payload: { messageId: message.id },
              timestamp: new Date(),
            });
          }}
          title="–£–¥–∞–ª–∏—Ç—å"
        >
          üóëÔ∏è
        </button>
      )}
    </div>
  </div>
);

/**
 * üîÑ SCROLL TO BOTTOM BUTTON
 */
const ScrollToBottomButton: React.FC<{ onClick: () => void }> = ({ onClick }) => (
  <button
    onClick={onClick}
    className={clsx(
      'fixed bottom-20 right-4 z-10',
      'bg-accent-primary hover:bg-blue-600 text-white',
      'w-12 h-12 rounded-full shadow-lg',
      'flex items-center justify-center',
      'transition-all duration-200 hover:scale-110',
      'focus:outline-none focus:ring-2 focus:ring-accent-primary focus:ring-opacity-50'
    )}
    title="–ü—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –≤–Ω–∏–∑"
  >
    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 14l-7 7m0 0l-7-7m7 7V3" />
    </svg>
  </button>
);

// üéØ –≠–ö–°–ü–û–†–¢–´
export default MessageList;
export type { MessageListProps };

// üîß –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:
// TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É infinite scroll –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
// TODO: –î–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏—è –∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π (INFO: Basic context menu added)
// FIXME: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤—ã—Å–æ—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
// HACK: –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ —ç–º–æ–¥–∑–∏ –∏–∫–æ–Ω–∫–∏, –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ Lucide React
// INFO: Debouncing for auto-scroll in MessageList has been implemented.