/**
 * üì± MAIN APP COMPONENT
 * 
 * üìö –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –ó–ê–ú–ï–¢–ö–ê:
 * –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç MCP Chat Client –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —á–∞—Å—Ç–∏: —Ä–æ—É—Ç–∏–Ω–≥, —Å–æ—Å—Ç–æ—è–Ω–∏–µ, UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.
 * 
 * üéØ –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –†–ï–®–ï–ù–ò–Ø:
 * 1. React Router –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
 * 2. Zustand –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
 * 3. Compound Component Pattern –¥–ª—è —á–∞—Ç–∞
 * 4. Error Boundaries –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
 */

import React, { Suspense, useState, useEffect } from 'react';
import { Routes, Route, Navigate } from 'react-router-dom';

// üé® UI –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import { ChatWindow, MessageList, MessageInput } from '@mcp-ui/chat-ui';
import { LoadingSpinner } from '@/components/LoadingSpinner';
import { Header } from '@/components/Header';
import { Sidebar } from '@/components/Sidebar';
import { StatusBar } from '@/components/StatusBar';

// üîå MCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
import { useMcpStore } from '@/store/mcpStore';
import { useChatStore } from '@/store/chatStore';

// üõ†Ô∏è –•—É–∫–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã
import { useKeyboardShortcuts } from '@/hooks/useKeyboardShortcuts';
import { useTheme } from '@/hooks/useTheme';

// üìù –¢–∏–ø—ã
import type { Message } from '@mcp-ui/chat-ui';

/**
 * üì± –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
function App() {
  // üé® –¢–µ–º–∞
  const { theme, toggleTheme } = useTheme();
  
  // üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ
  const { 
    servers, 
    activeServer, 
    connectionStatus,
    connectToServer,
    disconnectFromServer 
  } = useMcpStore();
  
  const {
    messages,
    addMessage,
    isTyping,
    sendMessage
  } = useChatStore();
  
  // üîß –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [loading, setLoading] = useState(true);
  
  // ‚å®Ô∏è –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
  useKeyboardShortcuts({
    'Ctrl+K': () => setSidebarOpen(!sidebarOpen),
    'Ctrl+Shift+T': toggleTheme,
  });
  
  // üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  useEffect(() => {
    const initializeApp = async () => {
      try {
        // üìù –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ localStorage
        const savedTheme = localStorage.getItem('mcp-chat-theme');
        if (savedTheme && savedTheme !== theme) {
          // setTheme(savedTheme as 'light' | 'dark');
        }
        
        // üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        const savedServers = localStorage.getItem('mcp-chat-servers');
        if (savedServers) {
          // loadServers(JSON.parse(savedServers));
        }
        
        // ‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ
        setLoading(false);
        
        console.log('‚úÖ MCP Chat Client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        setLoading(false);
      }
    };
    
    initializeApp();
  }, [theme]);
  
  // üì§ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleSendMessage = async (content: string) => {
    if (!content.trim()) return;
    
    try {
      // üìù –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userMessage: Message = {
        id: `user-${Date.now()}`,
        type: 'user',
        content: content.trim(),
        timestamp: new Date(),
        status: 'completed',
      };
      
      addMessage(userMessage);
      
      // üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ MCP –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
      if (activeServer) {
        await sendMessage(content.trim());
      } else {
        // ü§ñ –§–∏–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –Ω–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        setTimeout(() => {
          const assistantMessage: Message = {
            id: `assistant-${Date.now()}`,
            type: 'assistant', 
            content: '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–æ–¥–∫–ª—é—á–∏—Ç–µ MCP —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å (Ctrl+K)',
            timestamp: new Date(),
            status: 'completed',
          };
          addMessage(assistantMessage);
        }, 1000);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      
      // ‚ùå –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      const errorMessage: Message = {
        id: `error-${Date.now()}`,
        type: 'error',
        content: `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error}`,
        timestamp: new Date(),
        status: 'failed',
        error: {
          message: String(error),
          code: 'SEND_ERROR',
        },
      };
      addMessage(errorMessage);
    }
  };
  
  // üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —á–∞—Ç–∞
  const handleChatEvent = (event: any) => {
    console.log('üí¨ Chat Event:', event);
    
    switch (event.type) {
      case 'message-send':
        // –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ handleSendMessage
        break;
      case 'message-delete':
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        break;
      default:
        console.log('üîç –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —á–∞—Ç–∞:', event.type);
    }
  };
  
  // ‚è≥ –≠–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
  if (loading) {
    return (
      <div className="min-h-screen bg-bg-primary flex items-center justify-center">
        <div className="text-center">
          <LoadingSpinner size="large" />
          <h2 className="mt-4 text-xl font-semibold text-text-primary">
            –ó–∞–≥—Ä—É–∑–∫–∞ MCP Chat Client...
          </h2>
          <p className="mt-2 text-text-muted">
            –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
          </p>
        </div>
      </div>
    );
  }
  
  // üì± –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  return (
    <div className={`min-h-screen bg-bg-primary ${theme}`}>
      {/* üìä –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ */}
      <div className="flex h-screen">
        {/* üìã –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
        <Sidebar
          isOpen={sidebarOpen}
          onClose={() => setSidebarOpen(false)}
          servers={servers}
          activeServer={activeServer}
          onConnectServer={connectToServer}
          onDisconnectServer={disconnectFromServer}
        />
        
        {/* üí¨ –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —á–∞—Ç–∞ */}
        <div className="flex-1 flex flex-col">
          {/* üìä –®–∞–ø–∫–∞ */}
          <Header
            onToggleSidebar={() => setSidebarOpen(!sidebarOpen)}
            activeServer={activeServer}
            connectionStatus={connectionStatus}
            theme={theme}
            onToggleTheme={toggleTheme}
          />
          
          {/* üí¨ –û–±–ª–∞—Å—Ç—å —á–∞—Ç–∞ */}
          <main className="flex-1 flex flex-col overflow-hidden">
            <Suspense fallback={<LoadingSpinner />}>
              <Routes>
                {/* üí¨ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - —á–∞—Ç */}
                <Route path="/" element={
                  <ChatWindow
                    messages={messages}
                    onSendMessage={handleSendMessage}
                    onChatEvent={handleChatEvent}
                    connectionStatus={connectionStatus}
                    activeServer={activeServer}
                    isTyping={isTyping}
                    config={{
                      theme: theme,
                      showTimestamps: true,
                      showServerNames: true,
                      autoScroll: true,
                      compactMode: false,
                    }}
                    className="flex-1"
                  />
                } />
                
                {/* üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
                <Route path="*" element={<Navigate to="/" replace />} />
              </Routes>
            </Suspense>
          </main>
          
          {/* üìä –°—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è */}
          <StatusBar
            connectionStatus={connectionStatus}
            activeServer={activeServer}
            messageCount={messages.length}
          />
        </div>
      </div>
    </div>
  );
}

export default App;

// üéì –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–´–ï –ó–ê–ú–ï–¢–ö–ò:

/**
 * üí° APP ARCHITECTURE:
 * 
 * üèóÔ∏è **Component Structure**:
 * - Header: –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∏ —Å—Ç–∞—Ç—É—Å
 * - Sidebar: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏  
 * - ChatWindow: –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞
 * - StatusBar: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
 * 
 * üìä **State Management**:
 * - useMcpStore: MCP —Å–µ—Ä–≤–µ—Ä—ã –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 * - useChatStore: —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —á–∞—Ç –ª–æ–≥–∏–∫–∞
 * - –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è UI
 * 
 * üéØ **Event Handling**:
 * - Keyboard shortcuts –¥–ª—è UX
 * - Chat events –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * - Error handling –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
 */

/**
 * üîÑ MESSAGE FLOW:
 * 
 * üì§ **Outgoing Messages**:
 * 1. User types in MessageInput
 * 2. handleSendMessage adds user message
 * 3. Message sent to active MCP server
 * 4. Server response added as assistant message
 * 
 * üì• **Incoming Messages**:
 * 1. MCP server sends response/notification
 * 2. Message processed by MCP connector
 * 3. Chat store updated with new message
 * 4. UI automatically re-renders
 * 
 * ‚ùå **Error Handling**:
 * - Network errors gracefully handled
 * - Error messages shown to user
 * - Fallback responses when no server
 */