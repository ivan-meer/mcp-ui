/**
 * üí¨ CHAT STORE
 * 
 * üìö –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –ó–ê–ú–ï–¢–ö–ê:
 * Zustand store –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º.
 * –°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –∏—Å—Ç–æ—Ä–∏–∏ –∏ UI —Å–æ—Å—Ç–æ—è–Ω–∏—è.
 */

import { create } from 'zustand';
import { devtools, persist } from 'zustand/middleware';
import type { Message } from '@mcp-ui/chat-ui';

// üìù –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
interface ChatStoreState {
  // üìä –î–∞–Ω–Ω—ã–µ
  messages: Message[];
  isTyping: boolean;
  
  // üîß –î–µ–π—Å—Ç–≤–∏—è
  addMessage: (message: Message) => void;
  removeMessage: (messageId: string) => void;
  updateMessage: (messageId: string, updates: Partial<Message>) => void;
  clearMessages: () => void;
  sendMessage: (content: string) => Promise<void>;
  setTyping: (typing: boolean) => void;
}

/**
 * üí¨ Chat Store
 */
export const useChatStore = create<ChatStoreState>()(
  devtools(
    persist(
      (set, get) => ({
        // üìä –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        messages: [
          // üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          {
            id: 'welcome-1',
            type: 'system',
            content: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MCP Chat Client! üéâ',
            timestamp: new Date(),
            status: 'completed',
          },
          {
            id: 'welcome-2', 
            type: 'system',
            content: '–ü–æ–¥–∫–ª—é—á–∏—Ç–µ MCP —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å (–Ω–∞–∂–º–∏—Ç–µ Ctrl+K –∏–ª–∏ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é) —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.',
            timestamp: new Date(),
            status: 'completed',
          },
        ],
        isTyping: false,

        // üîß –î–µ–π—Å—Ç–≤–∏—è
        addMessage: (message) => {
          set((state) => ({
            messages: [...state.messages, message],
          }), false, 'addMessage');
        },

        removeMessage: (messageId) => {
          set((state) => ({
            messages: state.messages.filter(m => m.id !== messageId),
          }), false, 'removeMessage');
        },

        updateMessage: (messageId, updates) => {
          set((state) => ({
            messages: state.messages.map(message =>
              message.id === messageId
                ? { ...message, ...updates }
                : message
            ),
          }), false, 'updateMessage');
        },

        clearMessages: () => {
          set({ messages: [] }, false, 'clearMessages');
        },

        sendMessage: async (content) => {
          try {
            // üì§ –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userMessage: Message = {
              id: `user-${Date.now()}`,
              type: 'user',
              content,
              timestamp: new Date(),
              status: 'sending',
            };

            // üìù –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            get().addMessage(userMessage);

            // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
            setTimeout(() => {
              get().updateMessage(userMessage.id, { status: 'sent' });
            }, 100);

            // ‚å®Ô∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
            get().setTyping(true);

            // üß™ –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            setTimeout(() => {
              // ü§ñ –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
              const assistantMessage: Message = {
                id: `assistant-${Date.now()}`,
                type: 'assistant',
                content: generateMockResponse(content),
                timestamp: new Date(),
                status: 'completed',
                metadata: {
                  executionTime: Math.floor(Math.random() * 1000) + 500,
                },
              };

              // üìù –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∏ —É–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
              get().addMessage(assistantMessage);
              get().setTyping(false);

              // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
              get().updateMessage(userMessage.id, { status: 'completed' });
            }, 1500 + Math.random() * 2000);

          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            
            // ‚ùå –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            const errorMessage: Message = {
              id: `error-${Date.now()}`,
              type: 'error',
              content: `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error}`,
              timestamp: new Date(),
              status: 'failed',
              error: {
                message: String(error),
                code: 'SEND_ERROR',
              },
            };

            get().addMessage(errorMessage);
            get().setTyping(false);
          }
        },

        setTyping: (typing) => {
          set({ isTyping: typing }, false, 'setTyping');
        },
      }),
      {
        name: 'chat-store',
        // üìù –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
        partialize: (state) => ({
          messages: state.messages,
        }),
      }
    ),
    {
      name: 'chat-store',
    }
  )
);

/**
 * ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∫–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
 */
function generateMockResponse(userMessage: string): string {
  const message = userMessage.toLowerCase();
  
  // üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
  if (message.includes('–ø—Ä–∏–≤–µ—Ç') || message.includes('hello')) {
    return '–ü—Ä–∏–≤–µ—Ç! üëã –Ø –¥–µ–º–æ-–ø–æ–º–æ—â–Ω–∏–∫ MCP Chat Client. –ü–æ–∫–∞ —á—Ç–æ —è —Ä–∞–±–æ—Ç–∞—é –≤ —Ä–µ–∂–∏–º–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–π MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏!';
  }
  
  // ‚ùì –ü–æ–º–æ—â—å
  if (message.includes('–ø–æ–º–æ—â—å') || message.includes('help')) {
    return `üÜò **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

‚Ä¢ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ MCP —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ –º–µ–Ω—é (Ctrl+K)
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:
  - Ctrl+K: –æ—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —Å–µ—Ä–≤–µ—Ä–æ–≤
  - Ctrl+Shift+T: –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É
‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

üìö –≠—Ç–æ –¥–µ–º–æ-—Ä–µ–∂–∏–º. –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π MCP —Å–µ—Ä–≤–µ—Ä.`;
  }
  
  // üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
  if (message.includes('–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç') || message.includes('tool')) {
    return 'üîß **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:** –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ MCP —Å–µ—Ä–≤–µ—Ä —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ real-time –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏, API, –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –¥—Ä—É–≥–∏–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏.';
  }
  
  // üìä –°—Ç–∞—Ç—É—Å
  if (message.includes('—Å—Ç–∞—Ç—É—Å') || message.includes('status')) {
    return 'üìä **–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:**\n\n‚Ä¢ –†–µ–∂–∏–º: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è\n‚Ä¢ MCP —Å–µ—Ä–≤–µ—Ä: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω\n‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: ' + useChatStore.getState().messages.length + '\n‚Ä¢ –¢–µ–º–∞: –¢–µ–º–Ω–∞—è\n\n–î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ MCP —Å–µ—Ä–≤–µ—Ä.';
  }
  
  // üéØ –û–±—â–∏–π –æ—Ç–≤–µ—Ç
  const responses = [
    '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! ü§î –í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Å MCP —Å–µ—Ä–≤–µ—Ä–æ–º —è —Å–º–æ–≥—É –¥–∞—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.',
    '–ü–æ–Ω—è–ª! üìù –°–µ–π—á–∞—Å —è —Ä–∞–±–æ—Ç–∞—é –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.',
    '–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! üí° –° –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º MCP —Å–µ—Ä–≤–µ—Ä–æ–º —è —Å–º–æ–≥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞.',
    '–ó–∞–º–µ—Ç–∏–ª! üëÄ –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.',
    '–û—Ç–ª–∏—á–Ω–æ! ‚ú® –≠—Ç–æ –¥–µ–º–æ-–æ—Ç–≤–µ—Ç. –° –Ω–∞—Å—Ç–æ—è—â–∏–º MCP —Å–µ—Ä–≤–µ—Ä–æ–º —è —Å–º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.',
  ];
  
  return responses[Math.floor(Math.random() * responses.length)];
}

// üéì –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–´–ï –ó–ê–ú–ï–¢–ö–ò:

/**
 * üí° CHAT STATE MANAGEMENT:
 * 
 * üìù **Message Lifecycle**:
 * 1. User types message
 * 2. Message added with 'sending' status
 * 3. Sent to server, status ‚Üí 'sent'
 * 4. Server processes, status ‚Üí 'completed'
 * 5. Response received and displayed
 * 
 * üîÑ **State Updates**:
 * - Immutable updates —á–µ—Ä–µ–∑ Zustand
 * - Optimistic UI updates
 * - Error handling —Å fallback states
 * 
 * üíæ **Persistence**:
 * - Messages saved to localStorage
 * - UI state (typing) not persisted
 * - Partial state save –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */

/**
 * ü§ñ MOCK SYSTEM:
 * 
 * üéØ **Demo Responses**:
 * - Pattern matching –¥–ª—è smart responses
 * - Contextual help –∏ guidance
 * - Consistent UX even without real server
 * 
 * ‚è±Ô∏è **Realistic Timing**:
 * - Typing indicators
 * - Variable response delays
 * - Status transitions simulation
 * 
 * üîÑ **Fallback Strategy**:
 * - Graceful degradation –±–µ–∑ MCP server
 * - Educational responses
 * - Clear indication of demo mode
 */