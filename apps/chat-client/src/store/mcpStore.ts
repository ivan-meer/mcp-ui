/**
 * üîå MCP STORE
 * 
 * üìö –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –ó–ê–ú–ï–¢–ö–ê:
 * Zustand store –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏.
 * –°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤.
 */

import { create } from 'zustand';
import { devtools, persist } from 'zustand/middleware';
import type { McpServer, McpConnectionStatus } from '@mcp-ui/mcp-connector';

// üìù –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
interface McpStoreState {
  // üìä –î–∞–Ω–Ω—ã–µ
  servers: McpServer[];
  activeServer: McpServer | null;
  connectionStatus: McpConnectionStatus;
  
  // üîß –î–µ–π—Å—Ç–≤–∏—è
  addServer: (server: McpServer) => void;
  removeServer: (serverId: string) => void;
  connectToServer: (serverId: string) => Promise<void>;
  disconnectFromServer: () => Promise<void>;
  updateServerStatus: (serverId: string, status: 'online' | 'offline' | 'error') => void;
}

/**
 * üîå MCP Store
 */
export const useMcpStore = create<McpStoreState>()(
  devtools(
    persist(
      (set, get) => ({
        // üìä –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        servers: [
          // üß™ –î–µ–º–æ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          {
            id: 'demo-server',
            name: 'Demo MCP Server',
            description: '–õ–æ–∫–∞–ª—å–Ω—ã–π –¥–µ–º–æ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MCP –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π',
            version: '1.0.0',
            url: 'ws://localhost:3001',
            status: 'unknown',
            capabilities: {
              tools: { listChanged: true },
              resources: { listChanged: true },
              prompts: { listChanged: true },
            },
            transport: {
              type: 'websocket',
              config: {
                url: 'ws://localhost:3001',
                autoReconnect: true,
              },
            },
            metadata: {
              isDemo: true,
              category: 'development',
            },
          },
        ],
        activeServer: null,
        connectionStatus: 'disconnected',

        // üîß –î–µ–π—Å—Ç–≤–∏—è
        addServer: (server) => {
          set((state) => ({
            servers: [...state.servers, server],
          }), false, 'addServer');
        },

        removeServer: (serverId) => {
          set((state) => ({
            servers: state.servers.filter(s => s.id !== serverId),
            activeServer: state.activeServer?.id === serverId ? null : state.activeServer,
          }), false, 'removeServer');
        },

        connectToServer: async (serverId) => {
          const server = get().servers.find(s => s.id === serverId);
          if (!server) {
            console.error('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', serverId);
            return;
          }

          try {
            // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            set({ connectionStatus: 'connecting' }, false, 'connectToServer:start');
            
            console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É:', server.name);
            
            // TODO: –†–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ MCP Client
            // const client = createWebSocketClient({ url: server.url });
            // await client.connect();
            
            // üß™ –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            // ‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            set({
              activeServer: server,
              connectionStatus: 'connected',
            }, false, 'connectToServer:success');
            
            // üìä –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
            get().updateServerStatus(serverId, 'online');
            
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É:', server.name);
            
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
            
            set({
              connectionStatus: 'error',
              activeServer: null,
            }, false, 'connectToServer:error');
            
            get().updateServerStatus(serverId, 'error');
          }
        },

        disconnectFromServer: async () => {
          const activeServer = get().activeServer;
          if (!activeServer) return;

          try {
            set({ connectionStatus: 'disconnecting' }, false, 'disconnectFromServer:start');
            
            console.log('üíî –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', activeServer.name);
            
            // TODO: –†–µ–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
            // await client.disconnect();
            
            // üß™ –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
            await new Promise(resolve => setTimeout(resolve, 500));
            
            set({
              activeServer: null,
              connectionStatus: 'disconnected',
            }, false, 'disconnectFromServer:success');
            
            console.log('üíî –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
            
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:', error);
          }
        },

        updateServerStatus: (serverId, status) => {
          set((state) => ({
            servers: state.servers.map(server =>
              server.id === serverId
                ? { ...server, status, lastConnected: new Date() }
                : server
            ),
          }), false, 'updateServerStatus');
        },
      }),
      {
        name: 'mcp-store',
        // üîí –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        partialize: (state) => ({
          servers: state.servers.map(server => ({
            ...server,
            // üö´ –ò—Å–∫–ª—é—á–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            transport: {
              ...server.transport,
              config: {
                ...server.transport.config,
                // –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –ø–∞—Ä–æ–ª–∏
              }
            }
          })),
        }),
      }
    ),
    {
      name: 'mcp-store',
    }
  )
);

// üéì –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–´–ï –ó–ê–ú–ï–¢–ö–ò:

/**
 * üí° ZUSTAND STORE PATTERNS:
 * 
 * üèóÔ∏è **Store Structure**:
 * - State: –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * - Actions: —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è  
 * - Selectors: –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
 * 
 * üîß **Middleware Benefits**:
 * - devtools: Redux DevTools integration
 * - persist: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
 * - immer: immutable updates (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * 
 * üìä **State Management**:
 * - Immutable updates —á–µ—Ä–µ–∑ set()
 * - Async actions –¥–ª—è API calls
 * - Error handling –≤ actions
 */

/**
 * üîå CONNECTION MANAGEMENT:
 * 
 * üéØ **Connection States**:
 * - disconnected: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 * - connecting: –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 * - connected: –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
 * - error: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 * 
 * üîÑ **Connection Flow**:
 * 1. User selects server
 * 2. connectToServer action triggered
 * 3. MCP client creates connection
 * 4. Status updated based on result
 * 5. UI reflects current state
 * 
 * üõ°Ô∏è **Error Handling**:
 * - Try/catch –¥–ª—è –≤—Å–µ—Ö async operations
 * - Graceful fallback –Ω–∞ error states
 * - User feedback —á–µ—Ä–µ–∑ UI notifications
 */